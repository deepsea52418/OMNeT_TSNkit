//
// Generated file, do not edit! Created by nedtool 5.6 from inet/linklayer/ethernet/EthernetCommand.msg.
//

#ifndef __INET_ETHERNETCOMMAND_M_H
#define __INET_ETHERNETCOMMAND_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class EthernetCommandBase;
class EthernetBindCommand;
class EthernetCloseCommand;
class EthernetDestroyCommand;
class EthernetSocketClosedIndication;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/Protocol_m.h" // import inet.common.Protocol

#include "inet/linklayer/common/MacAddress_m.h" // import inet.linklayer.common.MacAddress


namespace inet {

/**
 * Enum generated from <tt>inet/linklayer/ethernet/EthernetCommand.msg:26</tt> by nedtool.
 * <pre>
 * enum EthernetCommandCode
 * {
 *     ETHERNET_C_DATA = 0;
 *     ETHERNET_C_BIND = 1;
 *     ETHERNET_C_CLOSE = 2;
 *     ETHERNET_C_DESTROY = 3;
 * }
 * </pre>
 */
enum EthernetCommandCode {
    ETHERNET_C_DATA = 0,
    ETHERNET_C_BIND = 1,
    ETHERNET_C_CLOSE = 2,
    ETHERNET_C_DESTROY = 3
};

/**
 * Enum generated from <tt>inet/linklayer/ethernet/EthernetCommand.msg:34</tt> by nedtool.
 * <pre>
 * enum EthernetStatusInd
 * {
 *     ETHERNET_I_DATA = 0;
 *     ETHERNET_I_SOCKET_CLOSED = 2;
 * }
 * </pre>
 */
enum EthernetStatusInd {
    ETHERNET_I_DATA = 0,
    ETHERNET_I_SOCKET_CLOSED = 2
};

/**
 * Class generated from <tt>inet/linklayer/ethernet/EthernetCommand.msg:40</tt> by nedtool.
 * <pre>
 * class EthernetCommandBase extends cObject
 * {
 * }
 * </pre>
 */
class INET_API EthernetCommandBase : public ::omnetpp::cObject
{
  protected:

  private:
    void copy(const EthernetCommandBase& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const EthernetCommandBase&);

  public:
    EthernetCommandBase();
    EthernetCommandBase(const EthernetCommandBase& other);
    virtual ~EthernetCommandBase();
    EthernetCommandBase& operator=(const EthernetCommandBase& other);
    virtual EthernetCommandBase *dup() const override {return new EthernetCommandBase(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const EthernetCommandBase& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, EthernetCommandBase& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/linklayer/ethernet/EthernetCommand.msg:44</tt> by nedtool.
 * <pre>
 * class EthernetBindCommand extends EthernetCommandBase
 * {
 *     MacAddress sourceAddress;
 *     MacAddress destinationAddress;
 *     int vlanId;
 *     Protocol *protocol;
 * }
 * </pre>
 */
class INET_API EthernetBindCommand : public ::inet::EthernetCommandBase
{
  protected:
    MacAddress sourceAddress;
    MacAddress destinationAddress;
    int vlanId = 0;
    Protocol * protocol = nullptr;

  private:
    void copy(const EthernetBindCommand& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const EthernetBindCommand&);

  public:
    EthernetBindCommand();
    EthernetBindCommand(const EthernetBindCommand& other);
    virtual ~EthernetBindCommand();
    EthernetBindCommand& operator=(const EthernetBindCommand& other);
    virtual EthernetBindCommand *dup() const override {return new EthernetBindCommand(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const MacAddress& getSourceAddress() const;
    virtual MacAddress& getSourceAddressForUpdate() { return const_cast<MacAddress&>(const_cast<EthernetBindCommand*>(this)->getSourceAddress());}
    virtual void setSourceAddress(const MacAddress& sourceAddress);
    virtual const MacAddress& getDestinationAddress() const;
    virtual MacAddress& getDestinationAddressForUpdate() { return const_cast<MacAddress&>(const_cast<EthernetBindCommand*>(this)->getDestinationAddress());}
    virtual void setDestinationAddress(const MacAddress& destinationAddress);
    virtual int getVlanId() const;
    virtual void setVlanId(int vlanId);
    virtual const Protocol * getProtocol() const;
    virtual Protocol * getProtocolForUpdate() { return const_cast<Protocol *>(const_cast<EthernetBindCommand*>(this)->getProtocol());}
    virtual void setProtocol(Protocol * protocol);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const EthernetBindCommand& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, EthernetBindCommand& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/linklayer/ethernet/EthernetCommand.msg:52</tt> by nedtool.
 * <pre>
 * class EthernetCloseCommand extends EthernetCommandBase
 * {
 * }
 * </pre>
 */
class INET_API EthernetCloseCommand : public ::inet::EthernetCommandBase
{
  protected:

  private:
    void copy(const EthernetCloseCommand& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const EthernetCloseCommand&);

  public:
    EthernetCloseCommand();
    EthernetCloseCommand(const EthernetCloseCommand& other);
    virtual ~EthernetCloseCommand();
    EthernetCloseCommand& operator=(const EthernetCloseCommand& other);
    virtual EthernetCloseCommand *dup() const override {return new EthernetCloseCommand(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const EthernetCloseCommand& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, EthernetCloseCommand& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/linklayer/ethernet/EthernetCommand.msg:56</tt> by nedtool.
 * <pre>
 * class EthernetDestroyCommand extends EthernetCommandBase
 * {
 * }
 * </pre>
 */
class INET_API EthernetDestroyCommand : public ::inet::EthernetCommandBase
{
  protected:

  private:
    void copy(const EthernetDestroyCommand& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const EthernetDestroyCommand&);

  public:
    EthernetDestroyCommand();
    EthernetDestroyCommand(const EthernetDestroyCommand& other);
    virtual ~EthernetDestroyCommand();
    EthernetDestroyCommand& operator=(const EthernetDestroyCommand& other);
    virtual EthernetDestroyCommand *dup() const override {return new EthernetDestroyCommand(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const EthernetDestroyCommand& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, EthernetDestroyCommand& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/linklayer/ethernet/EthernetCommand.msg:60</tt> by nedtool.
 * <pre>
 * class EthernetSocketClosedIndication extends EthernetCommandBase
 * {
 * }
 * </pre>
 */
class INET_API EthernetSocketClosedIndication : public ::inet::EthernetCommandBase
{
  protected:

  private:
    void copy(const EthernetSocketClosedIndication& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const EthernetSocketClosedIndication&);

  public:
    EthernetSocketClosedIndication();
    EthernetSocketClosedIndication(const EthernetSocketClosedIndication& other);
    virtual ~EthernetSocketClosedIndication();
    EthernetSocketClosedIndication& operator=(const EthernetSocketClosedIndication& other);
    virtual EthernetSocketClosedIndication *dup() const override {return new EthernetSocketClosedIndication(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const EthernetSocketClosedIndication& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, EthernetSocketClosedIndication& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_ETHERNETCOMMAND_M_H

