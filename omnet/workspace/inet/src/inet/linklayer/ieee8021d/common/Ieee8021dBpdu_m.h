//
// Generated file, do not edit! Created by nedtool 5.6 from inet/linklayer/ieee8021d/common/Ieee8021dBpdu.msg.
//

#ifndef __INET_IEEE8021DBPDU_M_H
#define __INET_IEEE8021DBPDU_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class Bpdu;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "inet/linklayer/common/MacAddress_m.h" // import inet.linklayer.common.MacAddress


namespace inet {

/**
 * Class generated from <tt>inet/linklayer/ieee8021d/common/Ieee8021dBpdu.msg:27</tt> by nedtool.
 * <pre>
 * //
 * // Represents a BPDU (Bridge PDU) used by the STP and RSTP protocols,
 * // as defined in the 802.1D-1998 specification.
 * //
 * class Bpdu extends FieldsChunk
 * {
 *     chunkLength = B(35);
 *     unsigned int protocolIdentifier;          // 0 for STP, 1 for RSTP (TODO use them)
 *     unsigned int protocolVersionIdentifier;   // currently 0
 * 
 *     unsigned int bpduType;                    // 0 for Configuration BPDU, 1 for Topology Change Notification BPDU
 *     bool tcaFlag;                             // Topology Change Acknowledgment flag
 *     bool tcFlag;                              // Topology Change flag
 * 
 *     MacAddress rootAddress;                   // address of the tree root (first part of Root Identifier)
 *     unsigned int rootPriority;                // priority of the tree root (second part of Root Identifier)
 *     unsigned int rootPathCost;                // cost to the root
 * 
 *     MacAddress bridgeAddress;                 // address of sender bridge (first part of Bridge Identifier)
 *     unsigned int bridgePriority;              // priority of sender bridge (second part of Bridge Identifier)
 * 
 *     unsigned int portNum;                     // port number (ethg[] gate index) of sender port (first part of Port Identifier)
 *     unsigned int portPriority;                // priority of sender port (second part of Port Identifier)
 * 
 *     simtime_t messageAge;                     // Message Age in seconds
 *     simtime_t maxAge;                         // maximum lifetime of the BPDU (seconds)
 *     simtime_t helloTime;                      // Hello Time of the sender bridge
 *     simtime_t forwardDelay;                   // Forward Delay timer of the sender bridge
 * }
 * </pre>
 */
class INET_API Bpdu : public ::inet::FieldsChunk
{
  protected:
    unsigned int protocolIdentifier = 0;
    unsigned int protocolVersionIdentifier = 0;
    unsigned int bpduType = 0;
    bool tcaFlag = false;
    bool tcFlag = false;
    MacAddress rootAddress;
    unsigned int rootPriority = 0;
    unsigned int rootPathCost = 0;
    MacAddress bridgeAddress;
    unsigned int bridgePriority = 0;
    unsigned int portNum = 0;
    unsigned int portPriority = 0;
    omnetpp::simtime_t messageAge = SIMTIME_ZERO;
    omnetpp::simtime_t maxAge = SIMTIME_ZERO;
    omnetpp::simtime_t helloTime = SIMTIME_ZERO;
    omnetpp::simtime_t forwardDelay = SIMTIME_ZERO;

  private:
    void copy(const Bpdu& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Bpdu&);

  public:
    Bpdu();
    Bpdu(const Bpdu& other);
    virtual ~Bpdu();
    Bpdu& operator=(const Bpdu& other);
    virtual Bpdu *dup() const override {return new Bpdu(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual unsigned int getProtocolIdentifier() const;
    virtual void setProtocolIdentifier(unsigned int protocolIdentifier);
    virtual unsigned int getProtocolVersionIdentifier() const;
    virtual void setProtocolVersionIdentifier(unsigned int protocolVersionIdentifier);
    virtual unsigned int getBpduType() const;
    virtual void setBpduType(unsigned int bpduType);
    virtual bool getTcaFlag() const;
    virtual void setTcaFlag(bool tcaFlag);
    virtual bool getTcFlag() const;
    virtual void setTcFlag(bool tcFlag);
    virtual const MacAddress& getRootAddress() const;
    virtual MacAddress& getRootAddressForUpdate() { handleChange();return const_cast<MacAddress&>(const_cast<Bpdu*>(this)->getRootAddress());}
    virtual void setRootAddress(const MacAddress& rootAddress);
    virtual unsigned int getRootPriority() const;
    virtual void setRootPriority(unsigned int rootPriority);
    virtual unsigned int getRootPathCost() const;
    virtual void setRootPathCost(unsigned int rootPathCost);
    virtual const MacAddress& getBridgeAddress() const;
    virtual MacAddress& getBridgeAddressForUpdate() { handleChange();return const_cast<MacAddress&>(const_cast<Bpdu*>(this)->getBridgeAddress());}
    virtual void setBridgeAddress(const MacAddress& bridgeAddress);
    virtual unsigned int getBridgePriority() const;
    virtual void setBridgePriority(unsigned int bridgePriority);
    virtual unsigned int getPortNum() const;
    virtual void setPortNum(unsigned int portNum);
    virtual unsigned int getPortPriority() const;
    virtual void setPortPriority(unsigned int portPriority);
    virtual omnetpp::simtime_t getMessageAge() const;
    virtual void setMessageAge(omnetpp::simtime_t messageAge);
    virtual omnetpp::simtime_t getMaxAge() const;
    virtual void setMaxAge(omnetpp::simtime_t maxAge);
    virtual omnetpp::simtime_t getHelloTime() const;
    virtual void setHelloTime(omnetpp::simtime_t helloTime);
    virtual omnetpp::simtime_t getForwardDelay() const;
    virtual void setForwardDelay(omnetpp::simtime_t forwardDelay);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Bpdu& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Bpdu& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_IEEE8021DBPDU_M_H

