//
// Generated file, do not edit! Created by nedtool 5.6 from inet/linklayer/acking/AckingMacHeader.msg.
//

#ifndef __INET_ACKINGMACHEADER_M_H
#define __INET_ACKINGMACHEADER_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class AckingMacHeader;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "inet/linklayer/common/MacAddress_m.h" // import inet.linklayer.common.MacAddress


namespace inet {

/**
 * Class generated from <tt>inet/linklayer/acking/AckingMacHeader.msg:31</tt> by nedtool.
 * <pre>
 * //
 * // Packet for ~AckingMac. Packet size is configurable
 * // in the MAC layer. 
 * //
 * class AckingMacHeader extends FieldsChunk
 * {
 *     chunkLength = B(16);
 *     MacAddress src;     // source address
 *     MacAddress dest;    // destination address
 *     int srcModuleId;    // technical data, uses instead of sending back an ACK packet
 *     int networkProtocol = -1;
 * }
 * </pre>
 */
class INET_API AckingMacHeader : public ::inet::FieldsChunk
{
  protected:
    MacAddress src;
    MacAddress dest;
    int srcModuleId = 0;
    int networkProtocol = -1;

  private:
    void copy(const AckingMacHeader& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const AckingMacHeader&);

  public:
    AckingMacHeader();
    AckingMacHeader(const AckingMacHeader& other);
    virtual ~AckingMacHeader();
    AckingMacHeader& operator=(const AckingMacHeader& other);
    virtual AckingMacHeader *dup() const override {return new AckingMacHeader(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const MacAddress& getSrc() const;
    virtual MacAddress& getSrcForUpdate() { handleChange();return const_cast<MacAddress&>(const_cast<AckingMacHeader*>(this)->getSrc());}
    virtual void setSrc(const MacAddress& src);
    virtual const MacAddress& getDest() const;
    virtual MacAddress& getDestForUpdate() { handleChange();return const_cast<MacAddress&>(const_cast<AckingMacHeader*>(this)->getDest());}
    virtual void setDest(const MacAddress& dest);
    virtual int getSrcModuleId() const;
    virtual void setSrcModuleId(int srcModuleId);
    virtual int getNetworkProtocol() const;
    virtual void setNetworkProtocol(int networkProtocol);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const AckingMacHeader& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, AckingMacHeader& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_ACKINGMACHEADER_M_H

