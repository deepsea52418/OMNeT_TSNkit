//
// Generated file, do not edit! Created by nedtool 5.6 from inet/linklayer/ieee8021q/Ieee8021qHeader.msg.
//

#ifndef __INET_IEEE8021QHEADER_M_H
#define __INET_IEEE8021QHEADER_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class Ieee8021qHeader;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk


namespace inet {

/**
 * Class generated from <tt>inet/linklayer/ieee8021q/Ieee8021qHeader.msg:22</tt> by nedtool.
 * <pre>
 * class Ieee8021qHeader extends FieldsChunk
 * {
 *     chunkLength = B(4);
 *     uint8_t pcp;       // Priority Code Point (PCP): a 3-bit field which refers to the IEEE 802.1p priority. It indicates the frame priority level.
 *                        // Values are from 0 (best effort) to 7 (highest); 1 represents the lowest priority.
 *     bool de;           // Drop Eligible (DE): a 1-bit field. May be used separately or in conjunction with PCP to indicate frames eligible to be dropped in the presence of congestion.
 *     uint16_t vid;      // VLAN Identifier (VID): a 12-bit field specifying the VLAN to which the frame belongs.
 *                        // The hexadecimal values of 0x000 and 0xFFF are reserved. All other values may be used as VLAN identifiers, allowing up to 4,094 VLANs.
 *                        // The reserved value 0x000 indicates that the frame does not belong to any VLAN; in this case,
 *                        // the 802.1Q tag specifies only a priority and is referred to as a priority tag. On bridges,
 *                        // VLAN 1 (the default VLAN ID) is often reserved for a management VLAN; this is vendor-specific.
 * }
 * </pre>
 */
class INET_API Ieee8021qHeader : public ::inet::FieldsChunk
{
  protected:
    uint8_t pcp = 0;
    bool de = false;
    uint16_t vid = 0;

  private:
    void copy(const Ieee8021qHeader& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Ieee8021qHeader&);

  public:
    Ieee8021qHeader();
    Ieee8021qHeader(const Ieee8021qHeader& other);
    virtual ~Ieee8021qHeader();
    Ieee8021qHeader& operator=(const Ieee8021qHeader& other);
    virtual Ieee8021qHeader *dup() const override {return new Ieee8021qHeader(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual uint8_t getPcp() const;
    virtual void setPcp(uint8_t pcp);
    virtual bool getDe() const;
    virtual void setDe(bool de);
    virtual uint16_t getVid() const;
    virtual void setVid(uint16_t vid);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ieee8021qHeader& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ieee8021qHeader& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_IEEE8021QHEADER_M_H

