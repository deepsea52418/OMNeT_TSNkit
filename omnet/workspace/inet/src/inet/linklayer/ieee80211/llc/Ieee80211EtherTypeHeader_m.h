//
// Generated file, do not edit! Created by nedtool 5.6 from inet/linklayer/ieee80211/llc/Ieee80211EtherTypeHeader.msg.
//

#ifndef __INET_IEEE80211ETHERTYPEHEADER_M_H
#define __INET_IEEE80211ETHERTYPEHEADER_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class Ieee80211EtherTypeHeader;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

// cplusplus {{
#include "inet/common/ProtocolGroup.h"
// }}


namespace inet {

/**
 * Class generated from <tt>inet/linklayer/ieee80211/llc/Ieee80211EtherTypeHeader.msg:29</tt> by nedtool.
 * <pre>
 * // IEEE 802.11 in 5.9 GHz band requires EtherType Protocol Discrimination (EPD)
 * class Ieee80211EtherTypeHeader extends FieldsChunk
 * {
 *     chunkLength = B(2);
 *     int etherType = -1; // ~EtherType (2 bytes)
 * }
 * </pre>
 */
class INET_API Ieee80211EtherTypeHeader : public ::inet::FieldsChunk
{
  protected:
    int etherType = -1;

  private:
    void copy(const Ieee80211EtherTypeHeader& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Ieee80211EtherTypeHeader&);

  public:
    Ieee80211EtherTypeHeader();
    Ieee80211EtherTypeHeader(const Ieee80211EtherTypeHeader& other);
    virtual ~Ieee80211EtherTypeHeader();
    Ieee80211EtherTypeHeader& operator=(const Ieee80211EtherTypeHeader& other);
    virtual Ieee80211EtherTypeHeader *dup() const override {return new Ieee80211EtherTypeHeader(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getEtherType() const;
    virtual void setEtherType(int etherType);

    virtual const Protocol* getProtocol() const
    {
        return ProtocolGroup::ethertype.findProtocol(getEtherType());
    }
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ieee80211EtherTypeHeader& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ieee80211EtherTypeHeader& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_IEEE80211ETHERTYPEHEADER_M_H

