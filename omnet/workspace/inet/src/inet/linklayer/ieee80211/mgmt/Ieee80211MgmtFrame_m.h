//
// Generated file, do not edit! Created by nedtool 5.6 from inet/linklayer/ieee80211/mgmt/Ieee80211MgmtFrame.msg.
//

#ifndef __INET__IEEE80211_IEEE80211MGMTFRAME_M_H
#define __INET__IEEE80211_IEEE80211MGMTFRAME_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {
namespace ieee80211 {

struct Ieee80211CapabilityInformation;
struct Ieee80211HandoverParameters;
struct Ieee80211SupportedRatesElement;
class Ieee80211MgmtFrame;
class Ieee80211AuthenticationFrame;
class Ieee80211DeauthenticationFrame;
class Ieee80211DisassociationFrame;
class Ieee80211ProbeRequestFrame;
class Ieee80211AssociationRequestFrame;
class Ieee80211ReassociationRequestFrame;
class Ieee80211AssociationResponseFrame;
class Ieee80211ReassociationResponseFrame;
class Ieee80211BeaconFrame;
class Ieee80211ProbeResponseFrame;
} // namespace ieee80211
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "inet/linklayer/ieee80211/mac/Ieee80211Frame_m.h" // import inet.linklayer.ieee80211.mac.Ieee80211Frame

#include "inet/linklayer/common/MacAddress_m.h" // import inet.linklayer.common.MacAddress


namespace inet {
namespace ieee80211 {

/**
 * Struct generated from inet/linklayer/ieee80211/mgmt/Ieee80211MgmtFrame.msg:36 by nedtool.
 */
struct INET_API Ieee80211CapabilityInformation
{
    Ieee80211CapabilityInformation();
    bool ESS;
    bool IBSS;
    bool CFPollable;
    bool CFPollRequest;
    bool privacy;
    bool DelayedBlockAck;
    bool InmediateBlockAck;
};

// helpers for local use
void INET_API __doPacking(omnetpp::cCommBuffer *b, const Ieee80211CapabilityInformation& a);
void INET_API __doUnpacking(omnetpp::cCommBuffer *b, Ieee80211CapabilityInformation& a);

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ieee80211CapabilityInformation& obj) { __doPacking(b, obj); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ieee80211CapabilityInformation& obj) { __doUnpacking(b, obj); }

/**
 * Struct generated from inet/linklayer/ieee80211/mgmt/Ieee80211MgmtFrame.msg:51 by nedtool.
 */
struct INET_API Ieee80211HandoverParameters
{
    Ieee80211HandoverParameters();
    double avgBackoffTime;
    double avgWaitTime;
    double avgErrorRate;
    double estAvailBW;
};

// helpers for local use
void INET_API __doPacking(omnetpp::cCommBuffer *b, const Ieee80211HandoverParameters& a);
void INET_API __doUnpacking(omnetpp::cCommBuffer *b, Ieee80211HandoverParameters& a);

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ieee80211HandoverParameters& obj) { __doPacking(b, obj); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ieee80211HandoverParameters& obj) { __doUnpacking(b, obj); }

/**
 * Enum generated from <tt>inet/linklayer/ieee80211/mgmt/Ieee80211MgmtFrame.msg:62</tt> by nedtool.
 * <pre>
 * //
 * // 802.11 reason code; values correspond to the standard.
 * //
 * enum Ieee80211ReasonCode
 * {
 *     RC_UNSPECIFIED = 1;
 *     RC_PREV_AUTH_EXPIRED = 2;
 *     RC_DEAUTH_MS_LEAVING = 3;
 *     RC_DISASS_INACTIVITY = 4;
 *     RC_DISASS_TOO_MANY_MS = 5;
 *     RC_NONAUTH_CLASS2 = 6;
 *     RC_NONASS_CLASS3 = 7;
 *     RC_DIASS_MS_LEAVING = 8;
 *     RC_NONAUTH_ASS_REQUEST = 9;
 *     RC_MESH_PEERING_CANCELLED = 52;
 *     RC_MESH_MAX_PEERS = 53;
 *     RC_MESH_CONFIGURATION_POLICY_VIOLATION = 54;
 *     RC_MESH_CLOSE_RCVD = 55;
 *     RC_MESH_MAX_RETRIES = 56;
 *     RC_MESH_CONFIRM_TIMEOUT = 57;
 *     RC_MESH_INVALID_GTK = 58;
 *     RC_MESH_INCONSISTENT_PARAMETERS = 59;
 *     RC_MESH_INVALID_SECURITY_CAPABILITY = 60;
 *     RC_MESH_PATH_ERROR_NO_PROXY_INFORMATION = 61;
 *     RC_MESH_PATH_ERROR_NO_FORWARDING_INFORMATION = 60;
 *     RC_MESH_PATH_ERROR_DESTINATION_UNREACHABLE = 63;
 *     RC_MAC_ADDRESS_ALREADY_EXISTS_IN_MBSS = 64;
 *     RC_MESH_CHANNEL_SWITCH_REGULATORY_REQUIREMENTS = 65;
 *     RC_MESH_CHANNEL_SWITCH_UNSPECIFIED = 66;
 * }
 * </pre>
 */
enum Ieee80211ReasonCode {
    RC_UNSPECIFIED = 1,
    RC_PREV_AUTH_EXPIRED = 2,
    RC_DEAUTH_MS_LEAVING = 3,
    RC_DISASS_INACTIVITY = 4,
    RC_DISASS_TOO_MANY_MS = 5,
    RC_NONAUTH_CLASS2 = 6,
    RC_NONASS_CLASS3 = 7,
    RC_DIASS_MS_LEAVING = 8,
    RC_NONAUTH_ASS_REQUEST = 9,
    RC_MESH_PEERING_CANCELLED = 52,
    RC_MESH_MAX_PEERS = 53,
    RC_MESH_CONFIGURATION_POLICY_VIOLATION = 54,
    RC_MESH_CLOSE_RCVD = 55,
    RC_MESH_MAX_RETRIES = 56,
    RC_MESH_CONFIRM_TIMEOUT = 57,
    RC_MESH_INVALID_GTK = 58,
    RC_MESH_INCONSISTENT_PARAMETERS = 59,
    RC_MESH_INVALID_SECURITY_CAPABILITY = 60,
    RC_MESH_PATH_ERROR_NO_PROXY_INFORMATION = 61,
    RC_MESH_PATH_ERROR_NO_FORWARDING_INFORMATION = 60,
    RC_MESH_PATH_ERROR_DESTINATION_UNREACHABLE = 63,
    RC_MAC_ADDRESS_ALREADY_EXISTS_IN_MBSS = 64,
    RC_MESH_CHANNEL_SWITCH_REGULATORY_REQUIREMENTS = 65,
    RC_MESH_CHANNEL_SWITCH_UNSPECIFIED = 66
};

/**
 * Enum generated from <tt>inet/linklayer/ieee80211/mgmt/Ieee80211MgmtFrame.msg:94</tt> by nedtool.
 * <pre>
 * //
 * // 802.11 status code; values correspond to the standard.
 * //
 * enum Ieee80211StatusCode
 * {
 *     SC_SUCCESSFUL = 0;
 *     SC_UNSPECIFIED = 1;
 *     SC_UNSUP_CAP = 10;
 *     SC_REASS_DENIED = 11;
 *     SC_ASS_DENIED_UNKNOWN = 12;
 *     SC_AUTH_ALG0_UNSUP = 13;
 *     SC_AUTH_OUT_OF_SEQ = 14;
 *     SC_AUTH_CHALLENGE_FAIL = 15;
 *     SC_AUTH_TIMEOUT = 16;
 *     SC_ASS_TOO_MANY_MS = 17;
 *     SC_DATARATE_UNSUP = 18;
 *     SC_AUTH_REJECT_ANTI_CLOGING = 76;
 *     SC_AUTH_REJECT_FINITE_CYC_GROUP_UNS = 77;
 *     SC_TBTT_REQUEST = 78;
 * }
 * </pre>
 */
enum Ieee80211StatusCode {
    SC_SUCCESSFUL = 0,
    SC_UNSPECIFIED = 1,
    SC_UNSUP_CAP = 10,
    SC_REASS_DENIED = 11,
    SC_ASS_DENIED_UNKNOWN = 12,
    SC_AUTH_ALG0_UNSUP = 13,
    SC_AUTH_OUT_OF_SEQ = 14,
    SC_AUTH_CHALLENGE_FAIL = 15,
    SC_AUTH_TIMEOUT = 16,
    SC_ASS_TOO_MANY_MS = 17,
    SC_DATARATE_UNSUP = 18,
    SC_AUTH_REJECT_ANTI_CLOGING = 76,
    SC_AUTH_REJECT_FINITE_CYC_GROUP_UNS = 77,
    SC_TBTT_REQUEST = 78
};

/**
 * Enum generated from <tt>inet/linklayer/ieee80211/mgmt/Ieee80211MgmtFrame.msg:113</tt> by nedtool.
 * <pre>
 * enum Ieee80211HwmpCode
 * {
 *     IE11S_GANN = 125;
 *     IE11S_RANN = 126;
 *     IE11S_PREQ = 130;
 *     IE11S_PREP = 131;
 *     IE11S_PERR = 132;
 * }
 * </pre>
 */
enum Ieee80211HwmpCode {
    IE11S_GANN = 125,
    IE11S_RANN = 126,
    IE11S_PREQ = 130,
    IE11S_PREP = 131,
    IE11S_PERR = 132
};

/**
 * Struct generated from inet/linklayer/ieee80211/mgmt/Ieee80211MgmtFrame.msg:125 by nedtool.
 */
struct INET_API Ieee80211SupportedRatesElement
{
    Ieee80211SupportedRatesElement();
    short numRates;
    double rate[8];
};

// helpers for local use
void INET_API __doPacking(omnetpp::cCommBuffer *b, const Ieee80211SupportedRatesElement& a);
void INET_API __doUnpacking(omnetpp::cCommBuffer *b, Ieee80211SupportedRatesElement& a);

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ieee80211SupportedRatesElement& obj) { __doPacking(b, obj); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ieee80211SupportedRatesElement& obj) { __doUnpacking(b, obj); }

/**
 * Class generated from <tt>inet/linklayer/ieee80211/mgmt/Ieee80211MgmtFrame.msg:134</tt> by nedtool.
 * <pre>
 * //
 * // Frame body base class used to hide various frame body types
 * //
 * class Ieee80211MgmtFrame extends FieldsChunk
 * {
 * }
 * </pre>
 */
class INET_API Ieee80211MgmtFrame : public ::inet::FieldsChunk
{
  protected:

  private:
    void copy(const Ieee80211MgmtFrame& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Ieee80211MgmtFrame&);

  public:
    Ieee80211MgmtFrame();
    Ieee80211MgmtFrame(const Ieee80211MgmtFrame& other);
    virtual ~Ieee80211MgmtFrame();
    Ieee80211MgmtFrame& operator=(const Ieee80211MgmtFrame& other);
    virtual Ieee80211MgmtFrame *dup() const override {return new Ieee80211MgmtFrame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ieee80211MgmtFrame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ieee80211MgmtFrame& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/linklayer/ieee80211/mgmt/Ieee80211MgmtFrame.msg:148</tt> by nedtool.
 * <pre>
 * //
 * // Authentication frame body format.
 * //
 * // Note: the "isLast" field is not part of the standard.
 * // The authentication procedure is simulated by this model by exchanging
 * // a number of "dummy" authentication frames without real contents;
 * // the "isLast" field gets set by the AP to signal the STA that
 * // the authentication procedure has completed and it does not need to
 * // send any more Authentication frames.
 * //
 * class Ieee80211AuthenticationFrame extends Ieee80211MgmtFrame
 * {
 *     chunkLength = B(6); // add 2+len bytes for challenge text if present
 *     unsigned short sequenceNumber;
 *     Ieee80211StatusCode statusCode;
 *     bool isLast; // not part of the standard; see above
 * }
 * </pre>
 */
class INET_API Ieee80211AuthenticationFrame : public ::inet::ieee80211::Ieee80211MgmtFrame
{
  protected:
    unsigned short sequenceNumber = 0;
    inet::ieee80211::Ieee80211StatusCode statusCode = static_cast<inet::ieee80211::Ieee80211StatusCode>(-1);
    bool isLast_ = false;

  private:
    void copy(const Ieee80211AuthenticationFrame& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Ieee80211AuthenticationFrame&);

  public:
    Ieee80211AuthenticationFrame();
    Ieee80211AuthenticationFrame(const Ieee80211AuthenticationFrame& other);
    virtual ~Ieee80211AuthenticationFrame();
    Ieee80211AuthenticationFrame& operator=(const Ieee80211AuthenticationFrame& other);
    virtual Ieee80211AuthenticationFrame *dup() const override {return new Ieee80211AuthenticationFrame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual unsigned short getSequenceNumber() const;
    virtual void setSequenceNumber(unsigned short sequenceNumber);
    virtual inet::ieee80211::Ieee80211StatusCode getStatusCode() const;
    virtual void setStatusCode(inet::ieee80211::Ieee80211StatusCode statusCode);
    virtual bool isLast() const;
    virtual void setIsLast(bool isLast);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ieee80211AuthenticationFrame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ieee80211AuthenticationFrame& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/linklayer/ieee80211/mgmt/Ieee80211MgmtFrame.msg:159</tt> by nedtool.
 * <pre>
 * //
 * // De-authentication frame body format
 * //
 * class Ieee80211DeauthenticationFrame extends Ieee80211MgmtFrame
 * {
 *     chunkLength = B(2);
 *     Ieee80211ReasonCode reasonCode;
 * }
 * </pre>
 */
class INET_API Ieee80211DeauthenticationFrame : public ::inet::ieee80211::Ieee80211MgmtFrame
{
  protected:
    inet::ieee80211::Ieee80211ReasonCode reasonCode = static_cast<inet::ieee80211::Ieee80211ReasonCode>(-1);

  private:
    void copy(const Ieee80211DeauthenticationFrame& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Ieee80211DeauthenticationFrame&);

  public:
    Ieee80211DeauthenticationFrame();
    Ieee80211DeauthenticationFrame(const Ieee80211DeauthenticationFrame& other);
    virtual ~Ieee80211DeauthenticationFrame();
    Ieee80211DeauthenticationFrame& operator=(const Ieee80211DeauthenticationFrame& other);
    virtual Ieee80211DeauthenticationFrame *dup() const override {return new Ieee80211DeauthenticationFrame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual inet::ieee80211::Ieee80211ReasonCode getReasonCode() const;
    virtual void setReasonCode(inet::ieee80211::Ieee80211ReasonCode reasonCode);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ieee80211DeauthenticationFrame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ieee80211DeauthenticationFrame& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/linklayer/ieee80211/mgmt/Ieee80211MgmtFrame.msg:168</tt> by nedtool.
 * <pre>
 * //
 * // Dis-association frame body format (same as De-authentication)
 * //
 * class Ieee80211DisassociationFrame extends Ieee80211MgmtFrame
 * {
 *     chunkLength = B(2);
 *     Ieee80211ReasonCode reasonCode;
 * }
 * </pre>
 */
class INET_API Ieee80211DisassociationFrame : public ::inet::ieee80211::Ieee80211MgmtFrame
{
  protected:
    inet::ieee80211::Ieee80211ReasonCode reasonCode = static_cast<inet::ieee80211::Ieee80211ReasonCode>(-1);

  private:
    void copy(const Ieee80211DisassociationFrame& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Ieee80211DisassociationFrame&);

  public:
    Ieee80211DisassociationFrame();
    Ieee80211DisassociationFrame(const Ieee80211DisassociationFrame& other);
    virtual ~Ieee80211DisassociationFrame();
    Ieee80211DisassociationFrame& operator=(const Ieee80211DisassociationFrame& other);
    virtual Ieee80211DisassociationFrame *dup() const override {return new Ieee80211DisassociationFrame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual inet::ieee80211::Ieee80211ReasonCode getReasonCode() const;
    virtual void setReasonCode(inet::ieee80211::Ieee80211ReasonCode reasonCode);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ieee80211DisassociationFrame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ieee80211DisassociationFrame& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/linklayer/ieee80211/mgmt/Ieee80211MgmtFrame.msg:177</tt> by nedtool.
 * <pre>
 * //
 * // Probe request frame body format
 * //
 * class Ieee80211ProbeRequestFrame extends Ieee80211MgmtFrame
 * {
 *     string SSID;
 *     Ieee80211SupportedRatesElement supportedRates;
 * }
 * </pre>
 */
class INET_API Ieee80211ProbeRequestFrame : public ::inet::ieee80211::Ieee80211MgmtFrame
{
  protected:
    omnetpp::opp_string SSID;
    Ieee80211SupportedRatesElement supportedRates;

  private:
    void copy(const Ieee80211ProbeRequestFrame& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Ieee80211ProbeRequestFrame&);

  public:
    Ieee80211ProbeRequestFrame();
    Ieee80211ProbeRequestFrame(const Ieee80211ProbeRequestFrame& other);
    virtual ~Ieee80211ProbeRequestFrame();
    Ieee80211ProbeRequestFrame& operator=(const Ieee80211ProbeRequestFrame& other);
    virtual Ieee80211ProbeRequestFrame *dup() const override {return new Ieee80211ProbeRequestFrame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const char * getSSID() const;
    virtual void setSSID(const char * SSID);
    virtual const Ieee80211SupportedRatesElement& getSupportedRates() const;
    virtual Ieee80211SupportedRatesElement& getSupportedRatesForUpdate() { handleChange();return const_cast<Ieee80211SupportedRatesElement&>(const_cast<Ieee80211ProbeRequestFrame*>(this)->getSupportedRates());}
    virtual void setSupportedRates(const Ieee80211SupportedRatesElement& supportedRates);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ieee80211ProbeRequestFrame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ieee80211ProbeRequestFrame& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/linklayer/ieee80211/mgmt/Ieee80211MgmtFrame.msg:186</tt> by nedtool.
 * <pre>
 * //
 * // Association request frame body format
 * //
 * class Ieee80211AssociationRequestFrame extends Ieee80211MgmtFrame
 * {
 *     string SSID;
 *     Ieee80211SupportedRatesElement supportedRates;
 * }
 * </pre>
 */
class INET_API Ieee80211AssociationRequestFrame : public ::inet::ieee80211::Ieee80211MgmtFrame
{
  protected:
    omnetpp::opp_string SSID;
    Ieee80211SupportedRatesElement supportedRates;

  private:
    void copy(const Ieee80211AssociationRequestFrame& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Ieee80211AssociationRequestFrame&);

  public:
    Ieee80211AssociationRequestFrame();
    Ieee80211AssociationRequestFrame(const Ieee80211AssociationRequestFrame& other);
    virtual ~Ieee80211AssociationRequestFrame();
    Ieee80211AssociationRequestFrame& operator=(const Ieee80211AssociationRequestFrame& other);
    virtual Ieee80211AssociationRequestFrame *dup() const override {return new Ieee80211AssociationRequestFrame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const char * getSSID() const;
    virtual void setSSID(const char * SSID);
    virtual const Ieee80211SupportedRatesElement& getSupportedRates() const;
    virtual Ieee80211SupportedRatesElement& getSupportedRatesForUpdate() { handleChange();return const_cast<Ieee80211SupportedRatesElement&>(const_cast<Ieee80211AssociationRequestFrame*>(this)->getSupportedRates());}
    virtual void setSupportedRates(const Ieee80211SupportedRatesElement& supportedRates);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ieee80211AssociationRequestFrame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ieee80211AssociationRequestFrame& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/linklayer/ieee80211/mgmt/Ieee80211MgmtFrame.msg:195</tt> by nedtool.
 * <pre>
 * //
 * // Re-association request frame body format (same as association)
 * //
 * class Ieee80211ReassociationRequestFrame extends Ieee80211AssociationRequestFrame
 * {
 *     MacAddress currentAP;
 * }
 * </pre>
 */
class INET_API Ieee80211ReassociationRequestFrame : public ::inet::ieee80211::Ieee80211AssociationRequestFrame
{
  protected:
    MacAddress currentAP;

  private:
    void copy(const Ieee80211ReassociationRequestFrame& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Ieee80211ReassociationRequestFrame&);

  public:
    Ieee80211ReassociationRequestFrame();
    Ieee80211ReassociationRequestFrame(const Ieee80211ReassociationRequestFrame& other);
    virtual ~Ieee80211ReassociationRequestFrame();
    Ieee80211ReassociationRequestFrame& operator=(const Ieee80211ReassociationRequestFrame& other);
    virtual Ieee80211ReassociationRequestFrame *dup() const override {return new Ieee80211ReassociationRequestFrame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const MacAddress& getCurrentAP() const;
    virtual MacAddress& getCurrentAPForUpdate() { handleChange();return const_cast<MacAddress&>(const_cast<Ieee80211ReassociationRequestFrame*>(this)->getCurrentAP());}
    virtual void setCurrentAP(const MacAddress& currentAP);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ieee80211ReassociationRequestFrame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ieee80211ReassociationRequestFrame& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/linklayer/ieee80211/mgmt/Ieee80211MgmtFrame.msg:203</tt> by nedtool.
 * <pre>
 * //
 * // Association response frame body format
 * //
 * class Ieee80211AssociationResponseFrame extends Ieee80211MgmtFrame
 * {
 *     Ieee80211StatusCode statusCode;
 *     short aid;
 *     Ieee80211SupportedRatesElement supportedRates;
 * }
 * </pre>
 */
class INET_API Ieee80211AssociationResponseFrame : public ::inet::ieee80211::Ieee80211MgmtFrame
{
  protected:
    inet::ieee80211::Ieee80211StatusCode statusCode = static_cast<inet::ieee80211::Ieee80211StatusCode>(-1);
    short aid = 0;
    Ieee80211SupportedRatesElement supportedRates;

  private:
    void copy(const Ieee80211AssociationResponseFrame& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Ieee80211AssociationResponseFrame&);

  public:
    Ieee80211AssociationResponseFrame();
    Ieee80211AssociationResponseFrame(const Ieee80211AssociationResponseFrame& other);
    virtual ~Ieee80211AssociationResponseFrame();
    Ieee80211AssociationResponseFrame& operator=(const Ieee80211AssociationResponseFrame& other);
    virtual Ieee80211AssociationResponseFrame *dup() const override {return new Ieee80211AssociationResponseFrame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual inet::ieee80211::Ieee80211StatusCode getStatusCode() const;
    virtual void setStatusCode(inet::ieee80211::Ieee80211StatusCode statusCode);
    virtual short getAid() const;
    virtual void setAid(short aid);
    virtual const Ieee80211SupportedRatesElement& getSupportedRates() const;
    virtual Ieee80211SupportedRatesElement& getSupportedRatesForUpdate() { handleChange();return const_cast<Ieee80211SupportedRatesElement&>(const_cast<Ieee80211AssociationResponseFrame*>(this)->getSupportedRates());}
    virtual void setSupportedRates(const Ieee80211SupportedRatesElement& supportedRates);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ieee80211AssociationResponseFrame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ieee80211AssociationResponseFrame& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/linklayer/ieee80211/mgmt/Ieee80211MgmtFrame.msg:213</tt> by nedtool.
 * <pre>
 * //
 * // Re-association response frame body format (same as AssociationResponse)
 * //
 * class Ieee80211ReassociationResponseFrame extends Ieee80211AssociationResponseFrame
 * {
 * }
 * </pre>
 */
class INET_API Ieee80211ReassociationResponseFrame : public ::inet::ieee80211::Ieee80211AssociationResponseFrame
{
  protected:

  private:
    void copy(const Ieee80211ReassociationResponseFrame& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Ieee80211ReassociationResponseFrame&);

  public:
    Ieee80211ReassociationResponseFrame();
    Ieee80211ReassociationResponseFrame(const Ieee80211ReassociationResponseFrame& other);
    virtual ~Ieee80211ReassociationResponseFrame();
    Ieee80211ReassociationResponseFrame& operator=(const Ieee80211ReassociationResponseFrame& other);
    virtual Ieee80211ReassociationResponseFrame *dup() const override {return new Ieee80211ReassociationResponseFrame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ieee80211ReassociationResponseFrame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ieee80211ReassociationResponseFrame& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/linklayer/ieee80211/mgmt/Ieee80211MgmtFrame.msg:220</tt> by nedtool.
 * <pre>
 * //
 * // Beacon frame body format.
 * //
 * class Ieee80211BeaconFrame extends Ieee80211MgmtFrame
 * {
 *     string SSID;
 *     Ieee80211SupportedRatesElement supportedRates;
 *     simtime_t beaconInterval;
 *     int channelNumber;
 *     Ieee80211HandoverParameters handoverParameters;     //TODO is it a vendor-specific parameter in serializer?
 * }
 * </pre>
 */
class INET_API Ieee80211BeaconFrame : public ::inet::ieee80211::Ieee80211MgmtFrame
{
  protected:
    omnetpp::opp_string SSID;
    Ieee80211SupportedRatesElement supportedRates;
    omnetpp::simtime_t beaconInterval = SIMTIME_ZERO;
    int channelNumber = 0;
    Ieee80211HandoverParameters handoverParameters;

  private:
    void copy(const Ieee80211BeaconFrame& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Ieee80211BeaconFrame&);

  public:
    Ieee80211BeaconFrame();
    Ieee80211BeaconFrame(const Ieee80211BeaconFrame& other);
    virtual ~Ieee80211BeaconFrame();
    Ieee80211BeaconFrame& operator=(const Ieee80211BeaconFrame& other);
    virtual Ieee80211BeaconFrame *dup() const override {return new Ieee80211BeaconFrame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const char * getSSID() const;
    virtual void setSSID(const char * SSID);
    virtual const Ieee80211SupportedRatesElement& getSupportedRates() const;
    virtual Ieee80211SupportedRatesElement& getSupportedRatesForUpdate() { handleChange();return const_cast<Ieee80211SupportedRatesElement&>(const_cast<Ieee80211BeaconFrame*>(this)->getSupportedRates());}
    virtual void setSupportedRates(const Ieee80211SupportedRatesElement& supportedRates);
    virtual omnetpp::simtime_t getBeaconInterval() const;
    virtual void setBeaconInterval(omnetpp::simtime_t beaconInterval);
    virtual int getChannelNumber() const;
    virtual void setChannelNumber(int channelNumber);
    virtual const Ieee80211HandoverParameters& getHandoverParameters() const;
    virtual Ieee80211HandoverParameters& getHandoverParametersForUpdate() { handleChange();return const_cast<Ieee80211HandoverParameters&>(const_cast<Ieee80211BeaconFrame*>(this)->getHandoverParameters());}
    virtual void setHandoverParameters(const Ieee80211HandoverParameters& handoverParameters);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ieee80211BeaconFrame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ieee80211BeaconFrame& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/linklayer/ieee80211/mgmt/Ieee80211MgmtFrame.msg:232</tt> by nedtool.
 * <pre>
 * //
 * // Probe response frame body format (same as Beacon)
 * //
 * class Ieee80211ProbeResponseFrame extends Ieee80211BeaconFrame
 * {
 * }
 * </pre>
 */
class INET_API Ieee80211ProbeResponseFrame : public ::inet::ieee80211::Ieee80211BeaconFrame
{
  protected:

  private:
    void copy(const Ieee80211ProbeResponseFrame& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Ieee80211ProbeResponseFrame&);

  public:
    Ieee80211ProbeResponseFrame();
    Ieee80211ProbeResponseFrame(const Ieee80211ProbeResponseFrame& other);
    virtual ~Ieee80211ProbeResponseFrame();
    Ieee80211ProbeResponseFrame& operator=(const Ieee80211ProbeResponseFrame& other);
    virtual Ieee80211ProbeResponseFrame *dup() const override {return new Ieee80211ProbeResponseFrame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ieee80211ProbeResponseFrame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ieee80211ProbeResponseFrame& obj) {obj.parsimUnpack(b);}

} // namespace ieee80211
} // namespace inet

#endif // ifndef __INET__IEEE80211_IEEE80211MGMTFRAME_M_H

