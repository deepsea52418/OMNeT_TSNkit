//
// Generated file, do not edit! Created by nedtool 5.6 from inet/networklayer/rsvpte/RsvpHelloMsg.msg.
//

#ifndef __INET_RSVPHELLOMSG_M_H
#define __INET_RSVPHELLOMSG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class RsvpHelloMsg;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/linklayer/base/MacHeaderBase_m.h" // import inet.linklayer.base.MacHeaderBase

#include "inet/networklayer/rsvpte/RsvpPacket_m.h" // import inet.networklayer.rsvpte.RsvpPacket


namespace inet {

/**
 * Class generated from <tt>inet/networklayer/rsvpte/RsvpHelloMsg.msg:38</tt> by nedtool.
 * <pre>
 * //
 * // RSVP HELLO REQUEST message
 * //
 * // This class adds convenience get() and set() methods to the generated
 * // base class, but no extra data.
 * //
 * // XXX FIXME all RSVP message have kind=RSVP_TRAFFIC
 * // to distinguish them:
 * // if they are RsvpPacket: use packet->getRsvpKind()
 * // if they are RsvpHelloMsg: only one type exists
 * //
 * // thus, we need dynamic_cast to find out what it is
 * // that's not good. we don't use kind, because kind
 * // is used by IP QoS mechanism (use DS field for IP QoS instead???)
 * //
 * class RsvpHelloMsg extends RsvpMessage
 * {
 *     bool request;
 *     bool ack;
 * 
 *     int srcInstance;
 *     int dstInstance;
 * 
 *     rsvpKind = HELLO_MESSAGE;
 * }
 * </pre>
 */
class INET_API RsvpHelloMsg : public ::inet::RsvpMessage
{
  protected:
    bool request = false;
    bool ack = false;
    int srcInstance = 0;
    int dstInstance = 0;

  private:
    void copy(const RsvpHelloMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const RsvpHelloMsg&);

  public:
    RsvpHelloMsg();
    RsvpHelloMsg(const RsvpHelloMsg& other);
    virtual ~RsvpHelloMsg();
    RsvpHelloMsg& operator=(const RsvpHelloMsg& other);
    virtual RsvpHelloMsg *dup() const override {return new RsvpHelloMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual bool getRequest() const;
    virtual void setRequest(bool request);
    virtual bool getAck() const;
    virtual void setAck(bool ack);
    virtual int getSrcInstance() const;
    virtual void setSrcInstance(int srcInstance);
    virtual int getDstInstance() const;
    virtual void setDstInstance(int dstInstance);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RsvpHelloMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RsvpHelloMsg& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_RSVPHELLOMSG_M_H

