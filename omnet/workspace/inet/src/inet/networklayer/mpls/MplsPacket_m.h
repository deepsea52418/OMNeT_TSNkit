//
// Generated file, do not edit! Created by nedtool 5.6 from inet/networklayer/mpls/MplsPacket.msg.
//

#ifndef __INET_MPLSPACKET_M_H
#define __INET_MPLSPACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class MplsLabel;
class MplsHeader;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "inet/networklayer/contract/ipv4/Ipv4Address_m.h" // import inet.networklayer.contract.ipv4.Ipv4Address


namespace inet {

/**
 * Class generated from <tt>inet/networklayer/mpls/MplsPacket.msg:26</tt> by nedtool.
 * <pre>
 * //
 * // MPLS label
 * //
 * class MplsLabel extends cObject
 * {
 *     long Label;     // \@bit(20)  Label value. A label with the value of 1 represents the router alert label.
 *     short tc;       // \@bit(3)   Traffic Class field for QoS (quality of service) priority and ECN (Explicit Congestion Notification). Prior to 2009 this field was called EXP.
 *     //    bool s;         // \@bit(1)   bottom of stack flag. If this is set, it signifies that the current label is the last in the stack.
 *     short ttl;      // \@bit(8)   time to live
 * }
 * </pre>
 */
class INET_API MplsLabel : public ::omnetpp::cObject
{
  protected:
    long Label = 0;
    short tc = 0;
    short ttl = 0;

  private:
    void copy(const MplsLabel& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MplsLabel&);

  public:
    MplsLabel();
    MplsLabel(const MplsLabel& other);
    virtual ~MplsLabel();
    MplsLabel& operator=(const MplsLabel& other);
    virtual MplsLabel *dup() const override {return new MplsLabel(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual long getLabel() const;
    virtual void setLabel(long Label);
    virtual short getTc() const;
    virtual void setTc(short tc);
    virtual short getTtl() const;
    virtual void setTtl(short ttl);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MplsLabel& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MplsLabel& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/networklayer/mpls/MplsPacket.msg:34</tt> by nedtool.
 * <pre>
 * class MplsHeader extends FieldsChunk
 * {
 *     MplsLabel labels[];
 * }
 * </pre>
 */
class INET_API MplsHeader : public ::inet::FieldsChunk
{
  protected:
    MplsLabel *labels = nullptr;
    size_t labels_arraysize = 0;

  private:
    void copy(const MplsHeader& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MplsHeader&);

  public:
    MplsHeader();
    MplsHeader(const MplsHeader& other);
    virtual ~MplsHeader();
    MplsHeader& operator=(const MplsHeader& other);
    virtual MplsHeader *dup() const override {return new MplsHeader(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual void setLabelsArraySize(size_t size);
    virtual size_t getLabelsArraySize() const;
    virtual const MplsLabel& getLabels(size_t k) const;
    virtual MplsLabel& getLabelsForUpdate(size_t k) { handleChange();return const_cast<MplsLabel&>(const_cast<MplsHeader*>(this)->getLabels(k));}
    virtual void setLabels(size_t k, const MplsLabel& labels);
    virtual void insertLabels(const MplsLabel& labels);
    virtual void insertLabels(size_t k, const MplsLabel& labels);
    virtual void eraseLabels(size_t k);

  public:
    /**
     * Returns a string with the labels, starting with the top of stack.
     */
    virtual std::string str() const override;

    /**
     * Swap Label operation
     */
    inline void swapLabel(MplsLabel newLabel) { ASSERT(labels_arraysize > 0); labels[labels_arraysize - 1] = newLabel; }

    /**
     * Pushes new label on the label stack
     */
    inline void pushLabel(MplsLabel newLabel) { insertLabels(newLabel); }

    /**
     * Pops the top label
     */
    inline void popLabel() { ASSERT(labels_arraysize > 0); eraseLabels(labels_arraysize - 1); }

    /**
     * Returns true if the label stack is not empty
     */
    inline bool hasLabel() { return labels_arraysize > 0; }

    /**
     * Returns the top label
     */
    inline MplsLabel getTopLabel() { ASSERT(labels_arraysize > 0); return labels[labels_arraysize - 1]; }

    virtual b getChunkLength() const override { return b(32) * labels_arraysize; }
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MplsHeader& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MplsHeader& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_MPLSPACKET_M_H

