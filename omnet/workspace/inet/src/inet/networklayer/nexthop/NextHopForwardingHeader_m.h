//
// Generated file, do not edit! Created by nedtool 5.6 from inet/networklayer/nexthop/NextHopForwardingHeader.msg.
//

#ifndef __INET_NEXTHOPFORWARDINGHEADER_M_H
#define __INET_NEXTHOPFORWARDINGHEADER_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class NextHopForwardingHeader;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/TlvOptions_m.h" // import inet.common.TlvOptions

#include "inet/networklayer/common/L3Address_m.h" // import inet.networklayer.common.L3Address

#include "inet/networklayer/contract/NetworkHeaderBase_m.h" // import inet.networklayer.contract.NetworkHeaderBase

// cplusplus {{
#include "inet/common/ProtocolGroup.h"
#include "inet/common/packet/Packet.h"
// }}

#include "inet/networklayer/common/IpProtocolId_m.h" // import inet.networklayer.common.IpProtocolId


namespace inet {

/**
 * Enum generated from <tt>inet/networklayer/nexthop/NextHopForwardingHeader.msg:36</tt> by nedtool.
 * <pre>
 * //
 * // Next hop forwarding TLV option types
 * //
 * enum NextHopTlvOptionTypes
 * {
 *     NEXTHOP_TLVOPTION_NOP1 = 0;
 *     NEXTHOP_TLVOPTION_NOPN = 1;
 *     NEXTHOP_TLVOPTION_TLV_GPSR = 47;
 * }
 * </pre>
 */
enum NextHopTlvOptionTypes {
    NEXTHOP_TLVOPTION_NOP1 = 0,
    NEXTHOP_TLVOPTION_NOPN = 1,
    NEXTHOP_TLVOPTION_TLV_GPSR = 47
};

/**
 * Class generated from <tt>inet/networklayer/nexthop/NextHopForwardingHeader.msg:46</tt> by nedtool.
 * <pre>
 * //
 * // Next hop forwarding datagram header using generic network addresses.
 * //
 * class NextHopForwardingHeader extends NetworkHeaderBase
 * {
 *     L3Address srcAddr;
 *     L3Address destAddr;
 *     IpProtocolId protocolId = IP_PROT_NONE;
 *     short hopLimit;
 *     B payloadLengthField;
 *     TlvOptions tlvOptions;
 * }
 * </pre>
 */
class INET_API NextHopForwardingHeader : public ::inet::NetworkHeaderBase
{
  protected:
    L3Address srcAddr;
    L3Address destAddr;
    inet::IpProtocolId protocolId = IP_PROT_NONE;
    short hopLimit = 0;
    B payloadLengthField = B(-1);
    TlvOptions tlvOptions;

  private:
    void copy(const NextHopForwardingHeader& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NextHopForwardingHeader&);

  public:
    NextHopForwardingHeader();
    NextHopForwardingHeader(const NextHopForwardingHeader& other);
    virtual ~NextHopForwardingHeader();
    NextHopForwardingHeader& operator=(const NextHopForwardingHeader& other);
    virtual NextHopForwardingHeader *dup() const override {return new NextHopForwardingHeader(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const L3Address& getSrcAddr() const;
    virtual L3Address& getSrcAddrForUpdate() { handleChange();return const_cast<L3Address&>(const_cast<NextHopForwardingHeader*>(this)->getSrcAddr());}
    virtual void setSrcAddr(const L3Address& srcAddr);
    virtual const L3Address& getDestAddr() const;
    virtual L3Address& getDestAddrForUpdate() { handleChange();return const_cast<L3Address&>(const_cast<NextHopForwardingHeader*>(this)->getDestAddr());}
    virtual void setDestAddr(const L3Address& destAddr);
    virtual inet::IpProtocolId getProtocolId() const;
    virtual void setProtocolId(inet::IpProtocolId protocolId);
    virtual short getHopLimit() const;
    virtual void setHopLimit(short hopLimit);
    virtual B getPayloadLengthField() const;
    virtual void setPayloadLengthField(B payloadLengthField);
    virtual const TlvOptions& getTlvOptions() const;
    virtual TlvOptions& getTlvOptionsForUpdate() { handleChange();return const_cast<TlvOptions&>(const_cast<NextHopForwardingHeader*>(this)->getTlvOptions());}
    virtual void setTlvOptions(const TlvOptions& tlvOptions);

  public:
    virtual L3Address getSourceAddress() const override { return getSrcAddr(); }
    virtual void setSourceAddress(const L3Address& addr) override { setSrcAddr(addr); }
    virtual L3Address getDestinationAddress() const override { return getDestAddr(); }
    virtual void setDestinationAddress(const L3Address& addr) override { setDestAddr(addr); }
    virtual const Protocol *getProtocol() const override { return ProtocolGroup::ipprotocol.findProtocol(getProtocolId()); }
    virtual void setProtocol(const Protocol *protocol) override { setProtocolId(static_cast<IpProtocolId>(ProtocolGroup::ipprotocol.getProtocolNumber(protocol))); }
    virtual bool isFragment() const override { return false; }
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const NextHopForwardingHeader& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, NextHopForwardingHeader& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_NEXTHOPFORWARDINGHEADER_M_H

