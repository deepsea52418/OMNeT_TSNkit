//
// Generated file, do not edit! Created by nedtool 5.6 from inet/networklayer/contract/ipv4/Ipv4SocketCommand.msg.
//

#ifndef __INET_IPV4SOCKETCOMMAND_M_H
#define __INET_IPV4SOCKETCOMMAND_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class Ipv4SocketCommandBase;
class Ipv4SocketBindCommand;
class Ipv4SocketConnectCommand;
class Ipv4SocketCloseCommand;
class Ipv4SocketDestroyCommand;
class Ipv4SocketClosedIndication;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/Protocol_m.h" // import inet.common.Protocol

#include "inet/networklayer/contract/ipv4/Ipv4Address_m.h" // import inet.networklayer.contract.ipv4.Ipv4Address


namespace inet {

/**
 * Enum generated from <tt>inet/networklayer/contract/ipv4/Ipv4SocketCommand.msg:25</tt> by nedtool.
 * <pre>
 * enum Ipv4CommandCode
 * {
 *     IPv4_C_BIND = 1;
 *     IPv4_C_CONNECT = 2;
 *     IPv4_C_CLOSE = 3;
 *     IPv4_C_DESTROY = 4;
 * }
 * </pre>
 */
enum Ipv4CommandCode {
    IPv4_C_BIND = 1,
    IPv4_C_CONNECT = 2,
    IPv4_C_CLOSE = 3,
    IPv4_C_DESTROY = 4
};

/**
 * Enum generated from <tt>inet/networklayer/contract/ipv4/Ipv4SocketCommand.msg:32</tt> by nedtool.
 * <pre>
 * enum Ipv4StatusInd
 * {
 *     IPv4_I_DATA = 0;
 *     IPv4_I_SOCKET_CLOSED = 1;
 * }
 * </pre>
 */
enum Ipv4StatusInd {
    IPv4_I_DATA = 0,
    IPv4_I_SOCKET_CLOSED = 1
};

/**
 * Class generated from <tt>inet/networklayer/contract/ipv4/Ipv4SocketCommand.msg:38</tt> by nedtool.
 * <pre>
 * class Ipv4SocketCommandBase extends cObject
 * {
 * }
 * </pre>
 */
class INET_API Ipv4SocketCommandBase : public ::omnetpp::cObject
{
  protected:

  private:
    void copy(const Ipv4SocketCommandBase& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Ipv4SocketCommandBase&);

  public:
    Ipv4SocketCommandBase();
    Ipv4SocketCommandBase(const Ipv4SocketCommandBase& other);
    virtual ~Ipv4SocketCommandBase();
    Ipv4SocketCommandBase& operator=(const Ipv4SocketCommandBase& other);
    virtual Ipv4SocketCommandBase *dup() const override {return new Ipv4SocketCommandBase(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ipv4SocketCommandBase& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ipv4SocketCommandBase& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/networklayer/contract/ipv4/Ipv4SocketCommand.msg:42</tt> by nedtool.
 * <pre>
 * class Ipv4SocketBindCommand extends Ipv4SocketCommandBase
 * {
 *     const Protocol *protocol;
 *     Ipv4Address localAddress;
 * }
 * </pre>
 */
class INET_API Ipv4SocketBindCommand : public ::inet::Ipv4SocketCommandBase
{
  protected:
    const Protocol * protocol = nullptr;
    Ipv4Address localAddress;

  private:
    void copy(const Ipv4SocketBindCommand& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Ipv4SocketBindCommand&);

  public:
    Ipv4SocketBindCommand();
    Ipv4SocketBindCommand(const Ipv4SocketBindCommand& other);
    virtual ~Ipv4SocketBindCommand();
    Ipv4SocketBindCommand& operator=(const Ipv4SocketBindCommand& other);
    virtual Ipv4SocketBindCommand *dup() const override {return new Ipv4SocketBindCommand(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const Protocol * getProtocol() const;
    virtual void setProtocol(const Protocol * protocol);
    virtual const Ipv4Address& getLocalAddress() const;
    virtual Ipv4Address& getLocalAddressForUpdate() { return const_cast<Ipv4Address&>(const_cast<Ipv4SocketBindCommand*>(this)->getLocalAddress());}
    virtual void setLocalAddress(const Ipv4Address& localAddress);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ipv4SocketBindCommand& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ipv4SocketBindCommand& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/networklayer/contract/ipv4/Ipv4SocketCommand.msg:48</tt> by nedtool.
 * <pre>
 * class Ipv4SocketConnectCommand extends Ipv4SocketCommandBase
 * {
 *     Ipv4Address remoteAddress;
 * }
 * </pre>
 */
class INET_API Ipv4SocketConnectCommand : public ::inet::Ipv4SocketCommandBase
{
  protected:
    Ipv4Address remoteAddress;

  private:
    void copy(const Ipv4SocketConnectCommand& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Ipv4SocketConnectCommand&);

  public:
    Ipv4SocketConnectCommand();
    Ipv4SocketConnectCommand(const Ipv4SocketConnectCommand& other);
    virtual ~Ipv4SocketConnectCommand();
    Ipv4SocketConnectCommand& operator=(const Ipv4SocketConnectCommand& other);
    virtual Ipv4SocketConnectCommand *dup() const override {return new Ipv4SocketConnectCommand(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const Ipv4Address& getRemoteAddress() const;
    virtual Ipv4Address& getRemoteAddressForUpdate() { return const_cast<Ipv4Address&>(const_cast<Ipv4SocketConnectCommand*>(this)->getRemoteAddress());}
    virtual void setRemoteAddress(const Ipv4Address& remoteAddress);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ipv4SocketConnectCommand& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ipv4SocketConnectCommand& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/networklayer/contract/ipv4/Ipv4SocketCommand.msg:53</tt> by nedtool.
 * <pre>
 * class Ipv4SocketCloseCommand extends Ipv4SocketCommandBase
 * {
 * }
 * </pre>
 */
class INET_API Ipv4SocketCloseCommand : public ::inet::Ipv4SocketCommandBase
{
  protected:

  private:
    void copy(const Ipv4SocketCloseCommand& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Ipv4SocketCloseCommand&);

  public:
    Ipv4SocketCloseCommand();
    Ipv4SocketCloseCommand(const Ipv4SocketCloseCommand& other);
    virtual ~Ipv4SocketCloseCommand();
    Ipv4SocketCloseCommand& operator=(const Ipv4SocketCloseCommand& other);
    virtual Ipv4SocketCloseCommand *dup() const override {return new Ipv4SocketCloseCommand(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ipv4SocketCloseCommand& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ipv4SocketCloseCommand& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/networklayer/contract/ipv4/Ipv4SocketCommand.msg:57</tt> by nedtool.
 * <pre>
 * class Ipv4SocketDestroyCommand extends Ipv4SocketCommandBase
 * {
 * }
 * </pre>
 */
class INET_API Ipv4SocketDestroyCommand : public ::inet::Ipv4SocketCommandBase
{
  protected:

  private:
    void copy(const Ipv4SocketDestroyCommand& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Ipv4SocketDestroyCommand&);

  public:
    Ipv4SocketDestroyCommand();
    Ipv4SocketDestroyCommand(const Ipv4SocketDestroyCommand& other);
    virtual ~Ipv4SocketDestroyCommand();
    Ipv4SocketDestroyCommand& operator=(const Ipv4SocketDestroyCommand& other);
    virtual Ipv4SocketDestroyCommand *dup() const override {return new Ipv4SocketDestroyCommand(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ipv4SocketDestroyCommand& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ipv4SocketDestroyCommand& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/networklayer/contract/ipv4/Ipv4SocketCommand.msg:61</tt> by nedtool.
 * <pre>
 * class Ipv4SocketClosedIndication extends Ipv4SocketCommandBase
 * {
 * }
 * </pre>
 */
class INET_API Ipv4SocketClosedIndication : public ::inet::Ipv4SocketCommandBase
{
  protected:

  private:
    void copy(const Ipv4SocketClosedIndication& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Ipv4SocketClosedIndication&);

  public:
    Ipv4SocketClosedIndication();
    Ipv4SocketClosedIndication(const Ipv4SocketClosedIndication& other);
    virtual ~Ipv4SocketClosedIndication();
    Ipv4SocketClosedIndication& operator=(const Ipv4SocketClosedIndication& other);
    virtual Ipv4SocketClosedIndication *dup() const override {return new Ipv4SocketClosedIndication(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ipv4SocketClosedIndication& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ipv4SocketClosedIndication& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_IPV4SOCKETCOMMAND_M_H

