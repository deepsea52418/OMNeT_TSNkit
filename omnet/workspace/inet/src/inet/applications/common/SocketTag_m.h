//
// Generated file, do not edit! Created by nedtool 5.6 from inet/applications/common/SocketTag.msg.
//

#ifndef __INET_SOCKETTAG_M_H
#define __INET_SOCKETTAG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class SocketTagBase;
class SocketReq;
class SocketInd;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/TagBase_m.h" // import inet.common.TagBase


namespace inet {

/**
 * Class generated from <tt>inet/applications/common/SocketTag.msg:11</tt> by nedtool.
 * <pre>
 * class SocketTagBase extends TagBase
 * {
 *     int socketId = -1; // a locally unique (network node) identifier that determines the application socket
 * }
 * </pre>
 */
class INET_API SocketTagBase : public ::inet::TagBase
{
  protected:
    int socketId = -1;

  private:
    void copy(const SocketTagBase& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SocketTagBase&);

  public:
    SocketTagBase();
    SocketTagBase(const SocketTagBase& other);
    virtual ~SocketTagBase();
    SocketTagBase& operator=(const SocketTagBase& other);
    virtual SocketTagBase *dup() const override {return new SocketTagBase(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getSocketId() const;
    virtual void setSocketId(int socketId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SocketTagBase& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SocketTagBase& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/applications/common/SocketTag.msg:19</tt> by nedtool.
 * <pre>
 * //
 * // Determines the application socket of an outgoing packet, sent by the application.
 * //
 * class SocketReq extends SocketTagBase
 * {
 * }
 * </pre>
 */
class INET_API SocketReq : public ::inet::SocketTagBase
{
  protected:

  private:
    void copy(const SocketReq& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SocketReq&);

  public:
    SocketReq();
    SocketReq(const SocketReq& other);
    virtual ~SocketReq();
    SocketReq& operator=(const SocketReq& other);
    virtual SocketReq *dup() const override {return new SocketReq(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SocketReq& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SocketReq& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/applications/common/SocketTag.msg:26</tt> by nedtool.
 * <pre>
 * //
 * // Specifies the application socket of an incoming packet, received by the application.
 * //
 * class SocketInd extends SocketTagBase
 * {
 * }
 * </pre>
 */
class INET_API SocketInd : public ::inet::SocketTagBase
{
  protected:

  private:
    void copy(const SocketInd& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SocketInd&);

  public:
    SocketInd();
    SocketInd(const SocketInd& other);
    virtual ~SocketInd();
    SocketInd& operator=(const SocketInd& other);
    virtual SocketInd *dup() const override {return new SocketInd(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SocketInd& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SocketInd& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_SOCKETTAG_M_H

