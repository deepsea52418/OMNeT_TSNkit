//
// Generated file, do not edit! Created by nedtool 5.6 from inet/applications/httptools/common/HttpEventMessages.msg.
//

#ifndef __INET__HTTPTOOLS_HTTPEVENTMESSAGES_M_H
#define __INET__HTTPTOOLS_HTTPEVENTMESSAGES_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {
namespace httptools {

class HttpServerStatusUpdateMsg;
} // namespace httptools
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs


namespace inet {
namespace httptools {

/**
 * Class generated from <tt>inet/applications/httptools/common/HttpEventMessages.msg:31</tt> by nedtool.
 * <pre>
 * //
 * // Server status update event
 * //
 * // Used by the controller to trigger popularity modifications for web sites.
 * //
 * // \@author  Kristjan V. Jonsson
 * //
 * message HttpServerStatusUpdateMsg
 * {
 *     string www;             // Name of the WWW site.
 *     simtime_t setTime;      // The event set time.
 *     int eventKind;          // The event kind, e.g. ss_special.
 *     double pvalue;          // The initial elevated probability.
 *     double pamortize;       // The amortization factor -- i.e. how much the pvalue is decreased on each hit.
 * }
 * </pre>
 */
class INET_API HttpServerStatusUpdateMsg : public ::omnetpp::cMessage
{
  protected:
    omnetpp::opp_string www;
    omnetpp::simtime_t setTime = SIMTIME_ZERO;
    int eventKind = 0;
    double pvalue = 0;
    double pamortize = 0;

  private:
    void copy(const HttpServerStatusUpdateMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const HttpServerStatusUpdateMsg&);

  public:
    HttpServerStatusUpdateMsg(const char *name=nullptr, short kind=0);
    HttpServerStatusUpdateMsg(const HttpServerStatusUpdateMsg& other);
    virtual ~HttpServerStatusUpdateMsg();
    HttpServerStatusUpdateMsg& operator=(const HttpServerStatusUpdateMsg& other);
    virtual HttpServerStatusUpdateMsg *dup() const override {return new HttpServerStatusUpdateMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const char * getWww() const;
    virtual void setWww(const char * www);
    virtual omnetpp::simtime_t getSetTime() const;
    virtual void setSetTime(omnetpp::simtime_t setTime);
    virtual int getEventKind() const;
    virtual void setEventKind(int eventKind);
    virtual double getPvalue() const;
    virtual void setPvalue(double pvalue);
    virtual double getPamortize() const;
    virtual void setPamortize(double pamortize);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const HttpServerStatusUpdateMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, HttpServerStatusUpdateMsg& obj) {obj.parsimUnpack(b);}

} // namespace httptools
} // namespace inet

#endif // ifndef __INET__HTTPTOOLS_HTTPEVENTMESSAGES_M_H

