//
// Generated file, do not edit! Created by nedtool 5.6 from inet/transportlayer/udp/UdpHeader.msg.
//

#ifndef __INET_UDPHEADER_M_H
#define __INET_UDPHEADER_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class UdpHeader;
} // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/transportlayer/common/CrcMode_m.h" // import inet.transportlayer.common.CrcMode

#include "inet/transportlayer/contract/TransportHeaderBase_m.h" // import inet.transportlayer.contract.TransportHeaderBase


namespace inet {

// cplusplus {{
const B UDP_HEADER_LENGTH = B(8);
// }}

/**
 * Class generated from <tt>inet/transportlayer/udp/UdpHeader.msg:35</tt> by nedtool.
 * <pre>
 * //
 * // Represents an Udp header, to be used with the ~Udp module.
 * //
 * class UdpHeader extends TransportHeaderBase
 * {
 *     unsigned short srcPort;
 *     unsigned short destPort;
 *     chunkLength = UDP_HEADER_LENGTH;
 *     B totalLengthField = B(-1);   // UDP header + payload in bytes
 *     uint16_t crc = 0;
 *     CrcMode crcMode = CRC_MODE_UNDEFINED;
 * }
 * </pre>
 */
class INET_API UdpHeader : public ::inet::TransportHeaderBase
{
  protected:
    unsigned short srcPort = 0;
    unsigned short destPort = 0;
    B totalLengthField = B(-1);
    uint16_t crc = 0;
    inet::CrcMode crcMode = CRC_MODE_UNDEFINED;

  private:
    void copy(const UdpHeader& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const UdpHeader&);

  public:
    UdpHeader();
    UdpHeader(const UdpHeader& other);
    virtual ~UdpHeader();
    UdpHeader& operator=(const UdpHeader& other);
    virtual UdpHeader *dup() const override {return new UdpHeader(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual unsigned short getSrcPort() const;
    virtual void setSrcPort(unsigned short srcPort);
    virtual unsigned short getDestPort() const;
    virtual void setDestPort(unsigned short destPort);
    virtual B getTotalLengthField() const;
    virtual void setTotalLengthField(B totalLengthField);
    virtual uint16_t getCrc() const;
    virtual void setCrc(uint16_t crc);
    virtual inet::CrcMode getCrcMode() const;
    virtual void setCrcMode(inet::CrcMode crcMode);

  public:
    virtual std::string str() const override;

    virtual unsigned int getSourcePort() const override { return getSrcPort(); }
    virtual void setSourcePort(unsigned int port) override { setSrcPort(port); }
    virtual unsigned int getDestinationPort() const override { return getDestPort(); }
    virtual void setDestinationPort(unsigned int port) override { setDestPort(port); }
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const UdpHeader& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, UdpHeader& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_UDPHEADER_M_H

