[General]

# visualize routes, red towards host0 and blue towards host6
*.visualizer.typename = "IntegratedMultiCanvasVisualizer"
*.visualizer.numRoutingTableVisualizers = 2
*.visualizer.routingTableVisualizer[*].displayRoutingTables = true
*.visualizer.routingTableVisualizer[*].nodeFilter = "router* or host0 or host6"
*.visualizer.routingTableVisualizer[*].labelFormat = "%d/%m (%e) -> %g (%n)"
*.visualizer.routingTableVisualizer[0].destinationFilter = "host0"
*.visualizer.routingTableVisualizer[0].lineColor = "red"
*.visualizer.routingTableVisualizer[1].destinationFilter = "host6"
*.visualizer.routingTableVisualizer[1].lineColor = "blue"

*.visualizer.interfaceTableVisualizer[0].nodeFilter = "not switch*"
#*.visualizer.interfaceTableVisualizer[0].placementHint = "top"
#*.visualizer.interfaceTableVisualizer[0].displayWiredInterfacesAtConnections = false
#*.visualizer.interfaceTableVisualizer[0].format = "%N %a/%l"

[Config Step1]
description = "Static routing"
network = RipNetworkA

# do not add direct routes
*.configurator.addDirectRoutes = false

# Application parameters
*.host0.numApps = 1
*.host0.app[0].typename = "PingApp"
*.host0.app[0].destAddr = "host6"

*.*.ipv4.arp.typename = "GlobalArp"

# Visualizer settings
*.visualizer.interfaceTableVisualizer[0].displayInterfaceTables = true

# ---------------------------------------------------------------

[Config Step2]
description = "Pinging after RIP convergence"
network = RipNetworkA

# adding default routes in all hosts
*.configurator.config = xml("<config> \
								<interface hosts='**' address='10.x.x.x' netmask='255.x.x.x'/> \
                                <autoroute sourceHosts='host*'/> \
                             </config>")

*.configurator.addStaticRoutes = true

# RIP parameters on routers
*.router*.hasRip = true
*.router*.rip.startupTime = uniform(0s,1s)
# disable advanced features for now!
*.router*.rip.ripConfig = xml("<config> <interface hosts='router*' mode='NoSplitHorizon' /> </config>")
*.router*.rip.triggeredUpdate = false

# Application parameters
*.host0.numApps = 1
*.host0.app[0].typename = "PingApp"
*.host0.app[0].destAddr = "host6"
*.host0.app[0].startTime = 50s

# turning on global ARP to focus on the RIP messages
*.*.ipv4.arp.typename = "GlobalArp"  # TODO: for some reasons GlobalArp does not work -> it seems to work now

# Visualizer settings
*.visualizer.interfaceTableVisualizer[0].displayInterfaceTables = true

# ---------------------------------------------------------------

[Config Step3]
description = "Link Breakage"
extends = Step2

# enable split horizon in order for the scenario to work properly
*.router*.rip.ripConfig = xml("<config> <interface hosts='router*' mode='SplitHorizon' /> </config>")

# disable ping application
*.host0.numApps = 0

*.scenarioManager.script = xmldoc("scenario2.xml")

# ---------------------------------------------------------------

[Config Step4]
description = "RIP Timeout timer and garbage-collection timer"
extends = Step2
network = RipNetworkB

# enable split horizon in order for the scenario to work properly
*.router*.rip.ripConfig = xml("<config> <interface hosts='router*' mode='SplitHorizon' /> </config>")

# disable ping application
*.host0.numApps = 0

*.scenarioManager.script = xmldoc("scenario1.xml")

# ---------------------------------------------------------------

[Config Step4A]
description = "What happens when the route comes back online before the timeout timer runs out?"
extends = Step4

# disconnect at 50s, reconnect at 180s
*.scenarioManager.script = xmldoc("scenario5.xml")

# ---------------------------------------------------------------

[Config Step4B]
description = "What happens when the route comes back online before the flush timer runs out?"
extends = Step4

# disconnect at 50s, reconnect at 300s
*.scenarioManager.script = xmldoc("scenario6.xml")

# ---------------------------------------------------------------

[Config Step4C]
description = "What happens when the route comes back online after the flush timer runs out and its already deleted?"
extends = Step4

# disconnect at 50s, reconnect at 300s
*.scenarioManager.script = xmldoc("scenario6.xml")

# ---------------------------------------------------------------

[Config Step5]
description = "RIP Triggered Update"
extends = Step3

*.router*.rip.triggeredUpdate = true

# ---------------------------------------------------------------

[Config Step6]
description = "Counting to Infinity (Two-node loop instability)"
network = RipNetworkC

# adding default routes in all hosts
*.configurator.config = xml("<config> \
								<interface hosts='**' address='10.x.x.x' netmask='255.x.x.x'/> \
                                <autoroute sourceHosts='host*'/> \
                             </config>")

*.configurator.addStaticRoutes = true

# RIP parameters on routers
*.router*.hasRip = true
*.router*.rip.startupTime = uniform(0s,1s)
# disable advanced features for now!
*.router*.rip.ripConfig = xml("<config> <interface hosts='router*' mode='NoSplitHorizon' /> </config>")
*.router*.rip.triggeredUpdate = false

# turning on global ARP to focus on the RIP messages
#*.*.ipv4.arp.typename = "GlobalArp"  # TODO: for some reasons GlobalArp does not work

*.scenarioManager.script = xmldoc("scenario4.xml")

# Visualizer settings
*.visualizer.interfaceTableVisualizer[0].displayInterfaceTables = true

*.visualizer.routingTableVisualizer[*].nodeFilter = "router* or host0 or host3"
*.visualizer.routingTableVisualizer[0].destinationFilter = "host0"
*.visualizer.routingTableVisualizer[1].destinationFilter = "host3"

# to solve the counting to infinity problem (two nodes instability), you can:

# 1) enable 'split horizon'
#*.router*.rip.ripConfig = xml("<config> <interface hosts='router*' mode='SplitHorizon' /> </config>")

# 2) or enable 'split horizon with poissoned reverse'
#*.router*.rip.ripConfig = xml("<config> <interface hosts='router*' mode='SplitHorizonPoisenedReverse' /> </config>")

# 3) activating triggered update is not a definite solution, because 
# it might get canceled due to the regular update timer being fired very soon! 
#*.router*.rip.triggeredUpdate = true

# enable ping app to see ping packets bouncing back and forth between the two routers

## Application parameters
#*.host0.numApps = 1
#*.host0.app[0].typename = "PingApp"
#*.host0.app[0].destAddr = "host3"
#*.host0.app[0].startTime = 35s
##*.host0.app[0].stopTime = 90s
#*.host0.app[0].sendInterval = 15s
#*.host0.app[0].hopLimit = 8
#
#*.visualizer.packetDropVisualizer[0].displayPacketDrops = true

**.arp.typename = "GlobalArp"

# ---------------------------------------------------------------

[Config Step6Solution1]
extends = Step6
description = "solution to couting to infinity problem: enable split horizon"

*.router*.rip.ripConfig = xml("<config> <interface hosts='router*' mode='SplitHorizon' /> </config>")

# ---------------------------------------------------------------

[Config Step6Solution2]
extends = Step6
description = "solution to couting to infinity problem: enable split horizon with poisoned reverse"

*.router*.rip.ripConfig = xml("<config> <interface hosts='router*' mode='SplitHorizonPoisonedReverse' /> </config>")

# ---------------------------------------------------------------

[Config Step6Solution3]
extends = Step6
description = "solution to couting to infinity problem: enable triggered updates"

*.router*.rip.triggeredUpdate = true

# more comments

# ---------------------------------------------------------------

[Config Step6DifferentTimings]
extends = Step6

# what happens if router 1 sends the update first ? -> no count to infinity

*.router1.rip.startupTime = 0.5s
*.router0.rip.startupTime = 1s

# ---------------------------------------------------------------

[Config Step7]
description = "Counting to Infinity (Loop Instability with Higher Number of Nodes)"
extends = Step6
network = RipNetworkD

# even split horizon with/without poissoned reverse is not able to solve this loop instability
#*.router*.rip.ripConfig = xml("<config> <interface hosts='router*' mode='SplitHorizon' /> </config>")

# triggered update causes the count to infinity to finsih faster!

# one solution is to use hold-down timer (next step)

*.host0.numApps = 0

# ---------------------------------------------------------------

[Config Step7SplitHorizon]
extends = Step7

# even split horizon with/without poissoned reverse is not able to solve this loop instability
*.router*.rip.ripConfig = xml("<config> <interface hosts='router*' mode='SplitHorizon' /> </config>")

# recovery: takes around 250s

# ---------------------------------------------------------------

[Config Step7TriggeredUpdates]
extends = Step7

# triggered update causes the count to infinity to finsih faster!
*.router*.rip.triggeredUpdate = true

*.router*.rip.ripConfig = xml("<config> <interface hosts='router*' mode='SplitHorizon' /> </config>")

# triggered updates seem to solve the count to infinity problem with our without splithorizon
# so not sure this config is needed

# ---------------------------------------------------------------

[Config Step8]
description = "Hold-down timer"
extends = Step7

# enabling split horizon with/without poissoned reverse alone does not solve the problem
# -> because there are loops -> a router doesnt send the update to where it received it from, but another router in the loop can
# but we have seen this in step7 so splithorizon is not needed here (actually, doesnt make a difference, but it is easier to demonstrate holddown without it)
#*.router*.rip.ripConfig = xml("<config> <interface hosts='router*' mode='SplitHorizon' /> </config>")
# without splithorizon, router2 sends the no longer working route to router3, with a metric of 3.
# since the route in router3 is in holddown, it doesn't update it -> it might be more visible this way

*.router*.rip.holdDownTime = 30s

# ---------------------------------------------------------------

[Config Step9]
description = "Measure RIP recovery time"
extends = Step2
sim-time-limit = 1500s

*.host0.numApps = 1
*.host0.app[0].typename = "UdpBasicApp"
*.host0.app[0].destAddresses = "host6"
*.host0.app[0].destPort = 1234
#*.host0.app[0].startTime = 50s
*.host0.app[0].sendInterval = 0.5s
*.host0.app[0].messageLength = 32 bytes

*.host6.numApps = 1
*.host6.app[0].typename = "UdpSink"
*.host6.app[0].localPort = 1234

# TODO: change startup time to maximise the effect of triggered update
*.router*.rip.startupTime = uniform(0s,1s)
# enable split horizon in order for the scenario to work properly
*.router*.rip.ripConfig = xml("<config> <interface hosts='router*' mode='SplitHorizon' /> </config>")

#*.scenarioManager.script = xmldoc("scenario3.xml")

*.scenarioManager.script = xmldoc("scenario7.xml")		# break link between router2 and switch1; with scenario3, the link doesn't recover

*.router*.rip.triggeredUpdate = ${triggeredUpdate = false, true}

# ---------------------------------------------------------------

[Config Step9NoNetmaskRoutes]
extends = Step9

**.netmaskRoutes = ""
*.configurator.addDirectRoutes = true

# ---------------------------------------------------------------

[Config Step10]
description = "Configure an interface as NoRIP"
extends = Step2

# RIP messages should be sent to those interfaces that a neighbor router is present!

*.router0.rip.ripConfig = xml("<config> \
								<interface names='eth[0]' mode='NoRIP' /> \
								<interface metric='1' /> \
							</config>")

*.router2.rip.ripConfig = xml("<config> \
								<interface names='eth[1]' mode='NoRIP' /> \
								<interface metric='1' /> \
							</config>")
