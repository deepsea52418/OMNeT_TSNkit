%description:
This test checks the correctness of dimensional signal power representation with sample-hold interpolation.

%includes:
#include "inet/common/mapping/MappingUtils.h"
#include "inet/physicallayer/base/packetlevel/DimensionalTransmitterBase.h"

%global:

using namespace inet::units::values;
using namespace inet::physicallayer;

class DimensionalTransmitterTest : public DimensionalTransmitterBase
{
  public:
    ConstMapping *add(ConstMapping *p1, ConstMapping *p2) {
        return new ConcatConstMapping<std::plus<double> >(p1, p2, false, Argument::MappedZero);
    }

    void printValue(ConstMapping *mapping, simtime_t time) {
        Argument position(dimensions);
        position.setTime(time);
        std::cout << "Value at " << time << ": " << mapping->getValue(position) << std::endl;
    }

    void printValue(ConstMapping *mapping, Hz frequency) {
        Argument position(dimensions);
        position.setArgValue(Dimension::frequency, frequency.get());
        std::cout << "Value at " << frequency << ": " << mapping->getValue(position) << std::endl;
    }

    void printValue(ConstMapping *mapping, simtime_t time, Hz frequency) {
        Argument position(dimensions);
        position.setTime(time);
        position.setArgValue(Dimension::frequency, frequency.get());
        std::cout << "Value at " << time << " " << frequency << ": " << mapping->getValue(position) << std::endl;
    }

    void testTime1();
    void testTime2();
    void testFrequency1();
    void testFrequency2();
    void testDual1();
    void testDual2();
};

void DimensionalTransmitterTest::testTime1()
{
    interpolationMode = Mapping::STEPS;
    dimensions = DimensionSet();
    dimensions.addDimension(Dimension::time);
    timeGains.clear();
    timeGains.push_back(TimeGainEntry('%', 0, 1));
    timeGains.push_back(TimeGainEntry('%', 1, 1));
    auto p = createPowerMapping(10, 30, GHz(1), MHz(200), W(1));
    std::cout << *p << std::endl;
    for (int i = 0; i <= 45; i += 5)
        printValue(p, i);
}

void DimensionalTransmitterTest::testTime2()
{
    interpolationMode = Mapping::STEPS;
    dimensions = DimensionSet();
    dimensions.addDimension(Dimension::time);
    timeGains.clear();
    timeGains.push_back(TimeGainEntry('%', 0, 1));
    timeGains.push_back(TimeGainEntry('%', 1, 1));
    auto p1 = createPowerMapping(10, 30, GHz(1), MHz(200), W(1));
    auto p2 = createPowerMapping(20, 40, GHz(1), MHz(200), W(10));
    std::cout << *p1 << std::endl;
    std::cout << *p2 << std::endl;
    auto total = add(p1, p2);
    std::cout << *total << std::endl;
    for (int i = 0; i <= 45; i += 5)
        printValue(total, i);
    std::cout << "Max value: " << MappingUtils::findMax(*total) << std::endl;
}

void DimensionalTransmitterTest::testFrequency1()
{
    interpolationMode = Mapping::STEPS;
    dimensions = DimensionSet();
    dimensions.addDimension(Dimension::frequency);
    frequencyGains.clear();
    frequencyGains.push_back(FrequencyGainEntry('%', 0, 1));
    frequencyGains.push_back(FrequencyGainEntry('%', 1, 1));
    auto p = createPowerMapping(10, 30, GHz(1), MHz(200), W(1));
    std::cout << *p << std::endl;
    for (int i = 800; i <= 1250; i += 50)
        printValue(p, MHz(i));
}

void DimensionalTransmitterTest::testFrequency2()
{
    interpolationMode = Mapping::STEPS;
    dimensions = DimensionSet();
    dimensions.addDimension(Dimension::frequency);
    frequencyGains.clear();
    frequencyGains.push_back(FrequencyGainEntry('%', 0, 1));
    frequencyGains.push_back(FrequencyGainEntry('%', 1, 1));
    auto p1 = createPowerMapping(10, 30, GHz(1), MHz(200), W(1));
    auto p2 = createPowerMapping(10, 30, GHz(1.1), MHz(200), W(10));
    std::cout << *p1 << std::endl;
    std::cout << *p2 << std::endl;
    auto total = add(p1, p2);
    std::cout << *total << std::endl;
    for (int i = 800; i <= 1250; i += 50)
        printValue(total, MHz(i));
    std::cout << "Max value: " << MappingUtils::findMax(*total) << std::endl;
}

void DimensionalTransmitterTest::testDual1()
{
    interpolationMode = Mapping::STEPS;
    dimensions = DimensionSet();
    dimensions.addDimension(Dimension::time);
    dimensions.addDimension(Dimension::frequency);
    timeGains.clear();
    timeGains.push_back(TimeGainEntry('%', 0, 1));
    timeGains.push_back(TimeGainEntry('%', 1, 1));
    frequencyGains.clear();
    frequencyGains.push_back(FrequencyGainEntry('%', 0, 1));
    frequencyGains.push_back(FrequencyGainEntry('%', 1, 1));
    auto p = createPowerMapping(10, 30, GHz(1), MHz(200), W(1));
    std::cout << *p << std::endl;
    for (int i = 0; i <= 45; i += 5)
        for (int j = 800; j <= 1250; j += 50)
            printValue(p, i, MHz(j));
}

void DimensionalTransmitterTest::testDual2()
{
    interpolationMode = Mapping::STEPS;
    dimensions = DimensionSet();
    dimensions.addDimension(Dimension::time);
    dimensions.addDimension(Dimension::frequency);
    timeGains.clear();
    timeGains.push_back(TimeGainEntry('%', 0, 1));
    timeGains.push_back(TimeGainEntry('%', 1, 1));
    frequencyGains.clear();
    frequencyGains.push_back(FrequencyGainEntry('%', 0, 1));
    frequencyGains.push_back(FrequencyGainEntry('%', 1, 1));
    auto p1 = createPowerMapping(10, 30, GHz(1), MHz(200), W(1));
    auto p2 = createPowerMapping(20, 40, GHz(1.1), MHz(200), W(10));
    std::cout << *p1 << std::endl;
    std::cout << *p2 << std::endl;
    auto total = add(p1, p2);
    std::cout << *total << std::endl;
    for (int i = 0; i <= 45; i += 5)
        for (int j = 800; j <= 1250; j += 50)
            printValue(total, i, MHz(j));
    std::cout << "Max value: " << MappingUtils::findMax(*total) << std::endl;
}

%activity:
DimensionalTransmitterTest tester;
tester.testTime1();
tester.testTime2();
tester.testFrequency1();
tester.testFrequency2();
tester.testDual1();
tester.testDual2();

%contains-regex: stdout
Value at 0: 0
Value at 5: 0
Value at 10: 1
Value at 15: 1
Value at 20: 1
Value at 25: 1
Value at 30: 0
Value at 35: 0
Value at 40: 0
Value at 45: 0
.*
Value at 0: 0
Value at 5: 0
Value at 10: 1
Value at 15: 1
Value at 20: 11
Value at 25: 11
Value at 30: 10
Value at 35: 10
Value at 40: 0
Value at 45: 0
Max value: 11
.*
Value at 800 MHz: 0
Value at 850 MHz: 0
Value at 900 MHz: 1
Value at 950 MHz: 1
Value at 1 GHz: 1
Value at 1.05 GHz: 1
Value at 1.1 GHz: 0
Value at 1.15 GHz: 0
Value at 1.2 GHz: 0
Value at 1.25 GHz: 0
.*
Value at 800 MHz: 0
Value at 850 MHz: 0
Value at 900 MHz: 1
Value at 950 MHz: 1
Value at 1 GHz: 11
Value at 1.05 GHz: 11
Value at 1.1 GHz: 10
Value at 1.15 GHz: 10
Value at 1.2 GHz: 0
Value at 1.25 GHz: 0
Max value: 11
.*
Value at 0 800 MHz: 0
Value at 0 850 MHz: 0
Value at 0 900 MHz: 0
Value at 0 950 MHz: 0
Value at 0 1 GHz: 0
Value at 0 1.05 GHz: 0
Value at 0 1.1 GHz: 0
Value at 0 1.15 GHz: 0
Value at 0 1.2 GHz: 0
Value at 0 1.25 GHz: 0
Value at 5 800 MHz: 0
Value at 5 850 MHz: 0
Value at 5 900 MHz: 0
Value at 5 950 MHz: 0
Value at 5 1 GHz: 0
Value at 5 1.05 GHz: 0
Value at 5 1.1 GHz: 0
Value at 5 1.15 GHz: 0
Value at 5 1.2 GHz: 0
Value at 5 1.25 GHz: 0
Value at 10 800 MHz: 0
Value at 10 850 MHz: 0
Value at 10 900 MHz: 1
Value at 10 950 MHz: 1
Value at 10 1 GHz: 1
Value at 10 1.05 GHz: 1
Value at 10 1.1 GHz: 0
Value at 10 1.15 GHz: 0
Value at 10 1.2 GHz: 0
Value at 10 1.25 GHz: 0
Value at 15 800 MHz: 0
Value at 15 850 MHz: 0
Value at 15 900 MHz: 1
Value at 15 950 MHz: 1
Value at 15 1 GHz: 1
Value at 15 1.05 GHz: 1
Value at 15 1.1 GHz: 0
Value at 15 1.15 GHz: 0
Value at 15 1.2 GHz: 0
Value at 15 1.25 GHz: 0
Value at 20 800 MHz: 0
Value at 20 850 MHz: 0
Value at 20 900 MHz: 1
Value at 20 950 MHz: 1
Value at 20 1 GHz: 1
Value at 20 1.05 GHz: 1
Value at 20 1.1 GHz: 0
Value at 20 1.15 GHz: 0
Value at 20 1.2 GHz: 0
Value at 20 1.25 GHz: 0
Value at 25 800 MHz: 0
Value at 25 850 MHz: 0
Value at 25 900 MHz: 1
Value at 25 950 MHz: 1
Value at 25 1 GHz: 1
Value at 25 1.05 GHz: 1
Value at 25 1.1 GHz: 0
Value at 25 1.15 GHz: 0
Value at 25 1.2 GHz: 0
Value at 25 1.25 GHz: 0
Value at 30 800 MHz: 0
Value at 30 850 MHz: 0
Value at 30 900 MHz: 0
Value at 30 950 MHz: 0
Value at 30 1 GHz: 0
Value at 30 1.05 GHz: 0
Value at 30 1.1 GHz: 0
Value at 30 1.15 GHz: 0
Value at 30 1.2 GHz: 0
Value at 30 1.25 GHz: 0
Value at 35 800 MHz: 0
Value at 35 850 MHz: 0
Value at 35 900 MHz: 0
Value at 35 950 MHz: 0
Value at 35 1 GHz: 0
Value at 35 1.05 GHz: 0
Value at 35 1.1 GHz: 0
Value at 35 1.15 GHz: 0
Value at 35 1.2 GHz: 0
Value at 35 1.25 GHz: 0
Value at 40 800 MHz: 0
Value at 40 850 MHz: 0
Value at 40 900 MHz: 0
Value at 40 950 MHz: 0
Value at 40 1 GHz: 0
Value at 40 1.05 GHz: 0
Value at 40 1.1 GHz: 0
Value at 40 1.15 GHz: 0
Value at 40 1.2 GHz: 0
Value at 40 1.25 GHz: 0
Value at 45 800 MHz: 0
Value at 45 850 MHz: 0
Value at 45 900 MHz: 0
Value at 45 950 MHz: 0
Value at 45 1 GHz: 0
Value at 45 1.05 GHz: 0
Value at 45 1.1 GHz: 0
Value at 45 1.15 GHz: 0
Value at 45 1.2 GHz: 0
Value at 45 1.25 GHz: 0
.*
Value at 0 800 MHz: 0
Value at 0 850 MHz: 0
Value at 0 900 MHz: 0
Value at 0 950 MHz: 0
Value at 0 1 GHz: 0
Value at 0 1.05 GHz: 0
Value at 0 1.1 GHz: 0
Value at 0 1.15 GHz: 0
Value at 0 1.2 GHz: 0
Value at 0 1.25 GHz: 0
Value at 5 800 MHz: 0
Value at 5 850 MHz: 0
Value at 5 900 MHz: 0
Value at 5 950 MHz: 0
Value at 5 1 GHz: 0
Value at 5 1.05 GHz: 0
Value at 5 1.1 GHz: 0
Value at 5 1.15 GHz: 0
Value at 5 1.2 GHz: 0
Value at 5 1.25 GHz: 0
Value at 10 800 MHz: 0
Value at 10 850 MHz: 0
Value at 10 900 MHz: 1
Value at 10 950 MHz: 1
Value at 10 1 GHz: 1
Value at 10 1.05 GHz: 1
Value at 10 1.1 GHz: 0
Value at 10 1.15 GHz: 0
Value at 10 1.2 GHz: 0
Value at 10 1.25 GHz: 0
Value at 15 800 MHz: 0
Value at 15 850 MHz: 0
Value at 15 900 MHz: 1
Value at 15 950 MHz: 1
Value at 15 1 GHz: 1
Value at 15 1.05 GHz: 1
Value at 15 1.1 GHz: 0
Value at 15 1.15 GHz: 0
Value at 15 1.2 GHz: 0
Value at 15 1.25 GHz: 0
Value at 20 800 MHz: 0
Value at 20 850 MHz: 0
Value at 20 900 MHz: 1
Value at 20 950 MHz: 1
Value at 20 1 GHz: 11
Value at 20 1.05 GHz: 11
Value at 20 1.1 GHz: 10
Value at 20 1.15 GHz: 10
Value at 20 1.2 GHz: 0
Value at 20 1.25 GHz: 0
Value at 25 800 MHz: 0
Value at 25 850 MHz: 0
Value at 25 900 MHz: 1
Value at 25 950 MHz: 1
Value at 25 1 GHz: 11
Value at 25 1.05 GHz: 11
Value at 25 1.1 GHz: 10
Value at 25 1.15 GHz: 10
Value at 25 1.2 GHz: 0
Value at 25 1.25 GHz: 0
Value at 30 800 MHz: 0
Value at 30 850 MHz: 0
Value at 30 900 MHz: 0
Value at 30 950 MHz: 0
Value at 30 1 GHz: 10
Value at 30 1.05 GHz: 10
Value at 30 1.1 GHz: 10
Value at 30 1.15 GHz: 10
Value at 30 1.2 GHz: 0
Value at 30 1.25 GHz: 0
Value at 35 800 MHz: 0
Value at 35 850 MHz: 0
Value at 35 900 MHz: 0
Value at 35 950 MHz: 0
Value at 35 1 GHz: 10
Value at 35 1.05 GHz: 10
Value at 35 1.1 GHz: 10
Value at 35 1.15 GHz: 10
Value at 35 1.2 GHz: 0
Value at 35 1.25 GHz: 0
Value at 40 800 MHz: 0
Value at 40 850 MHz: 0
Value at 40 900 MHz: 0
Value at 40 950 MHz: 0
Value at 40 1 GHz: 0
Value at 40 1.05 GHz: 0
Value at 40 1.1 GHz: 0
Value at 40 1.15 GHz: 0
Value at 40 1.2 GHz: 0
Value at 40 1.25 GHz: 0
Value at 45 800 MHz: 0
Value at 45 850 MHz: 0
Value at 45 900 MHz: 0
Value at 45 950 MHz: 0
Value at 45 1 GHz: 0
Value at 45 1.05 GHz: 0
Value at 45 1.1 GHz: 0
Value at 45 1.15 GHz: 0
Value at 45 1.2 GHz: 0
Value at 45 1.25 GHz: 0
Max value: 11
