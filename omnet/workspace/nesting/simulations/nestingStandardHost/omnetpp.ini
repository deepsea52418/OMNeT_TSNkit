[General]
outputvectormanager-class="omnetpp::envir::SqliteOutputVectorManager"
outputscalarmanager-class="omnetpp::envir::SqliteOutputScalarManager"

network = NestingStandardHostSim

check-signals = true
record-eventlog = false
debug-on-errors = true
result-dir = result_dir
output-vector-file = result_dir/robotController2_vec.sqlite
output-scalar-file = result_dir/robotController2_sca.sqlite
sim-time-limit = 0.1s

# IPv4 network configurator
**.configurator.config = xmldoc("config.xml")

# Disable all unecessary recordings
**.scalar-recording = false
**.eth.queuing.**.vector-recording = false
**.eth.etherEncapE.**.vector-recording = false
**.eth.etherEncapP.**.vector-recording = false
**.eth.frameForward.**.vector-recording = false
**.eth.vlanEncapE.**.vector-recording = false
**.eth.vlanEncapP.**.vector-recording = false
**.eth[*].etherEncapE.**.vector-recording = false
**.eth[*].etherEncapP.**.vector-recording = false
**.eth[*].frameForward.**.vector-recording = false
**.eth[*].queuing.gateController.**.vector-recording = false
# **.eth[*].queuing.queues[*].**.vector-recording = true
**.eth[*].queuing.queuingFrames.**.vector-recording = false
**.eth[*].queuing.transmissionSelection.**.vector-recording = false
**.eth[*].queuing.tsAlgorithms[*].**.vector-recording = false
**.eth[*].vlanEncapE.**.vector-recording = false
**.eth[*].vlanEncapP.**.vector-recording = false
**.processingDelay.vector-recording = false
**.processingDelay[*].**.vector-recording = false
# **.trafGenSchedApp.**.vector-recording = false

# Enable required recordings
# enqueuePK
**.eth[*].queuing.**.vector-recording = true
**.eth[*].queuing.queues[7].**.vector-recording = true
# startTxExpressFrame, receivedExpressFrame
**.mac.**.vector-recording = true
# txExpressFrame (Switches)
**.eth[*].mac.**.vector-recording = true
**.trafGenSchedApp.**.vector-recording = true

# Debug
**.displayAddresses = true
**.verbose = true
**.promiscuous = true
**.oscillator.frequency = 1GHz


# MAC Addresses

**.n0.eth.address = "00:00:00:00:00:01"
**.n1.eth.address = "00:00:00:00:00:02"
**.n2.eth.address = "00:00:00:00:00:03"
**.n3.eth.address = "00:00:00:00:00:04"
**.n4.eth.address = "00:00:00:00:00:05"

# Switches
**.n5.processingDelay.delay = 2000ns
**.n6.processingDelay.delay = 2000ns

**.filteringDatabase.database = xmldoc("routing.xml", "/filteringDatabases/")
**.filteringDatabase.cycle = xmldoc("routing.xml", "/schedule/")

**.gateController.enableHoldAndRelease = false
**.eth[*].queuing.tsAlgorithms[0].typename = "StrictPriority"
**.eth[*].queuing.tsAlgorithms[1].typename = "StrictPriority"
**.eth[*].queuing.tsAlgorithms[2].typename = "StrictPriority"
**.eth[*].queuing.tsAlgorithms[3].typename = "StrictPriority"
**.eth[*].queuing.tsAlgorithms[4].typename = "StrictPriority"
**.eth[*].queuing.tsAlgorithms[5].typename = "StrictPriority"
**.eth[*].queuing.tsAlgorithms[6].typename = "StrictPriority"
**.eth[*].queuing.tsAlgorithms[7].typename = "StrictPriority"



# Buffer capacity of queues
**.queues[*].bufferCapacity = 363360b

# Set switches to enable preemption


# Schedule/Routing Swap
**.n5.eth[3].queue.gateController.initialSchedule = xmldoc("schedules.xml", "/schedule/switch[@name='n5']/port[@id='3']/schedule")
**.n6.eth[1].queue.gateController.initialSchedule = xmldoc("schedules.xml", "/schedule/switch[@name='n6']/port[@id='1']/schedule")
**.n6.eth[2].queue.gateController.initialSchedule = xmldoc("schedules.xml", "/schedule/switch[@name='n6']/port[@id='2']/schedule")


# Streams
**.n0.numApps = 1
# Cyclic scheduled traffic (Stream #0)
**.n0.app[0].typename = "UdpScheduledTrafficApp"
**.n0.app[0].trafficGenerator.localPort = 8
**.n0.app[0].scheduleManager.initialAdminSchedule = xmldoc("schedules.xml", "/schedule/stream[@id='0']/datagramSchedule")
**.n1.numApps = 1
# Best effort traffic (Stream #1)
**.n1.app[0].typename = "AppVlanWrapper"
**.n1.app[0].vlanRequester.pcp = 3
**.n1.app[0].app.typename = "UdpBasicApp"
**.n1.app[0].app.localPort = 16
**.n1.app[0].app.destPort = 16
**.n1.app[0].app.destAddresses = "224.0.0.2"
**.n1.app[0].app.sendInterval = 300000ns
**.n1.app[0].app.dontFragment = true
**.n1.app[0].app.messageLength = 1kB
**.n1.app[0].app.packetName = "UdpBestEffortTraffic"
**.n2.numApps = 1
# Cyclic scheduled traffic (Stream #2)
**.n2.app[0].typename = "UdpScheduledTrafficApp"
**.n2.app[0].trafficGenerator.localPort = 24
**.n2.app[0].scheduleManager.initialAdminSchedule = xmldoc("schedules.xml", "/schedule/stream[@id='1']/datagramSchedule")
**.n3.numApps = 1
# Cyclic scheduled traffic (Stream #0)
**.n3.app[0].typename = "UdpSink"
**.n3.app[0].localPort = 8
**.n4.numApps = 2
# Best effort traffic (Stream #1)
**.n4.app[0].typename = "UdpSink"
**.n4.app[0].localPort = 16
# Cyclic scheduled traffic (Stream #2)
**.n4.app[1].typename = "UdpSink"
**.n4.app[1].localPort = 24



# Misc Config

