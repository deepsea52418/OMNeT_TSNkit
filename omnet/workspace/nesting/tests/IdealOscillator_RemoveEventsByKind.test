%description:
Removes tick events from an IdealOscillator module by their kind attribute. In
this test case we implement a Sieve of Eratosthenes to schedule ticks only at
ticks with an index equal to a prime number.

%file: package.ned
package @TESTNAME@;
@namespace(@TESTNAME@);

%file: test.ned
package @TESTNAME@;

import nesting.common.time.IdealOscillator;

network Test
{
    @display("bgb=280,213");
    submodules:
        oscillator: IdealOscillator {
            @display("p=87,103");
        }
        testIdealOscillator: TestIdealOscillator {
            @display("p=182.70667,102.24");
        }
}

%file: TestIdealOscillator.ned
package @TESTNAME@;

simple TestIdealOscillator
{
    parameters:
        string oscillatorModule = default("^.oscillator");
}


%file: TestIdealOscillator.h
#ifndef __@TESTNAME@_TestIdealOscillator_H_
#define __@TESTNAME@_TestIdealOscillator_H_

#include <omnetpp.h>

#include "nesting/common/time/IOscillator.h"
#include "nesting/common/time/IdealOscillator.h"

#include <vector>

using namespace omnetpp;
using namespace nesting;

namespace @TESTNAME@ {

class TestIdealOscillator : public cSimpleModule, public IOscillator::TickListener
{
protected:
    IdealOscillator* oscillator;
    std::vector<uint64_t> primes = {2, 3, 5, 7, 11, 13, 17, 19}; // prime numbers <= 20
protected:
    virtual void initialize() override;
public:
    virtual void onTick(IOscillator& oscillator, std::shared_ptr<const IOscillator::Tick> tick) override;
};

} // namespace @TESTNAME@

#endif

%file: TestIdealOscillator.cc
#include "TestIdealOscillator.h"

#include "inet/common/ModuleAccess.h"

#include <iostream>
#include <algorithm>

namespace @TESTNAME@ {

Define_Module(TestIdealOscillator);

void TestIdealOscillator::initialize()
{
    oscillator = check_and_cast<IdealOscillator*>(getModuleByPath(par("oscillatorModule")));
    
    for (int idleTicks = 2; idleTicks <= 20; idleTicks++) {
    	oscillator->subscribeTick(*this, idleTicks, idleTicks);
    }
}

void TestIdealOscillator::onTick(IOscillator& oscillator, std::shared_ptr<const IOscillator::Tick> tick)
{
    Enter_Method("tick");
    
    // Tick should be prime number
    uint64_t currentTick = oscillator.updateAndGetTickCount();
    
    bool isPrime = std::find(primes.begin(), primes.end(), currentTick) != primes.end();
    if (!isPrime) {
    	throw cRuntimeError("Current tick should not have been scheduled!");
    }
    
    for (uint64_t tick = currentTick; tick <= 20; tick += currentTick) {
    	oscillator.unsubscribeTicks(*this, tick);
    }
}

} // namespace @TESTNAME@

%inifile: omnetpp.ini
[General]
network = Test
sim-time-limit = 1ms

%exitcode: 0